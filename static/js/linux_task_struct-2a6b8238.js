import"./vue-baa4c554.js";import{b as t}from"./@vue-3d103999.js";const _={},a=`<p>\u53C2\u8003\uFF1A
<a href="https://www.jianshu.com/p/691d02380312">https://www.jianshu.com/p/691d02380312</a>
<a href="https://blog.csdn.net/npy_lp/article/details/7292563">https://blog.csdn.net/npy_lp/article/details/7292563</a>
<a href="https://blog.csdn.net/gatieme/article/details/51383272">https://blog.csdn.net/gatieme/article/details/51383272</a></p>
<h2>1.\u9996\u5148\u4EC0\u4E48\u662F\u8FDB\u7A0B\uFF1F</h2>
<h3>1.1\u8FDB\u7A0B\u53EF\u4EE5\u8FD9\u6837\u63CF\u8FF0\uFF1A</h3>
<p>\u8FDB\u7A0B\u662F\u7A0B\u5E8F\u7684\u4E00\u4E2A\u6267\u884C\u5B9E\u4F8B\uFF1B
\u8FDB\u7A0B\u662F\u6B63\u5728\u6267\u884C\u7684\u7A0B\u5E8F\uFF1B
\u8FDB\u7A0B\u662F\u80FD\u5206\u914D\u5904\u7406\u5668\u5E76\u7531\u5904\u7406\u5668\u6267\u884C\u7684\u5B9E\u4F53\u3002
\u6309\u5185\u6838\u89C2\u70B9\u6765\u8C08\u8FDB\u7A0B\uFF1A\u5B83\u62C5\u5F53\u5206\u914D\u7CFB\u7EDF\u8D44\u6E90\uFF08CPU\u65F6\u95F4\uFF0C\u5185\u5B58\uFF09\u7684\u5B9E\u4F53\u3002</p>
<h3>1.2\u8FDB\u7A0B\u7684\u4E24\u4E2A\u57FA\u672C\u5143\u7D20</h3>
<p>\u4E00\u662F\u7A0B\u5E8F\u4EE3\u7801\uFF08\u53EF\u80FD\u88AB\u6267\u884C\u76F8\u540C\u7A0B\u5E8F\u7684\u5176\u4ED6\u8FDB\u7A0B\u5171\u4EAB\uFF09\uFF0C\u4E8C\u662F\u548C\u4EE3\u7801\u76F8\u5173\u8054\u7684\u6570\u636E\u96C6\u3002\u8FD9\u91CC\u7684\u201C\u548C\u4EE3\u7801\u76F8\u5173\u8054\u7684\u6570\u636E\u96C6\u6307\u7684\u662F\u6570\u636E\u6BB5\u548C\u8FDB\u7A0B\u63A7\u5236\u5757\u201D\u3002\u8FDB\u7A0B\u662F\u4E00\u79CD\u52A8\u6001\u63CF\u8FF0\uFF0C\u4F46\u662F\u5E76\u4E0D\u4EE3\u8868\u6240\u6709\u7684\u8FDB\u7A0B\u90FD\u5728\u8FD0\u884C\u3002(\u8FDB\u7A0B\u5728\u5185\u5B58\u4E2D\u56E0\u7B56\u7565\u6216\u8C03\u5EA6\u9700\u6C42\uFF0C\u4F1A\u5904\u4E8E\u5404\u79CD\u72B6\u6001)\u3002</p>
<h3>1.3\u8FD9\u91CC\u518D\u660E\u786E\u4EE5\u4E0B\u51E0\u70B9\uFF1A</h3>
<p>\uFF081\uFF09 \u64CD\u4F5C\u7CFB\u7EDF\u6267\u884C\u7A0B\u5E8F\u7684\u8FC7\u7A0B\uFF1A</p>
<p><img src="image/linux_task_struct1.png" alt="\u64CD\u4F5C\u7CFB\u7EDF\u6267\u884C\u7A0B\u5E8F\u7684\u8FC7\u7A0B"></p>
<p>\uFF082\uFF09\u8FDB\u7A0B\u662F\u52A8\u6001\u8FD0\u884C\u7684\u5B9E\u4F8B\uFF0C\u4F46\u662F\u5E76\u4E0D\u662F\u6240\u6709\u7684\u8FDB\u7A0B\u90FD\u5728\u8FD0\u884C\uFF0C\u8FD9\u524D\u540E\u4E24\u53E5\u8BDD\u5E76\u4E0D\u77DB\u76FE\uFF0C\u56E0\u4E3A\u7A0B\u5E8F\u88AB\u52A0\u8F7D\u5230\u5185\u5B58\u4E2D\u540E\uFF0C\u5B83\u7684\u6267\u884C\u7531\u8FDB\u7A0B\u7684\u72B6\u6001\u4EE5\u53CA\u8C03\u5EA6\u7B97\u6CD5\u7B49\u6765\u51B3\u5B9A\u8FDB\u7A0B\u7684\u8FD0\u884C</p>
<h2>2.\u8FDB\u7A0B\u7684\u63CF\u8FF0</h2>
<p>\u4E0A\u9762\u6211\u4EEC\u5DF2\u7ECF\u63D0\u5230\u8FC7PCB\uFF0C\u90A3\u4E48PCB\u5230\u5E95\u662F\u7528\u6765\u5E72\u4EC0\u4E48\u7684\u5462\uFF1F</p>
<p>\u5B66\u4E86\u64CD\u4F5C\u7CFB\u7EDF\u540E\uFF0C\u6211\u4EEC\u90FD\u77E5\u9053\u64CD\u4F5C\u7CFB\u7EDF\u8981\u60F3\u7BA1\u7406\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5B83\u4E0D\u662F\u76F4\u63A5\u8FDB\u884C\u7BA1\u7406\u7684\uFF0C\u800C\u662F\u901A\u8FC7\u5F97\u5230\u88AB\u7BA1\u7406\u8005\u7684\u4E00\u4E9B\u6709\u6548\u4FE1\u606F\u52A0\u4EE5\u7BA1\u7406\u7684\uFF0C\u56E0\u6B64\u5728\u8FD9\u91CC\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u7406\u89E3\uFF0C\u64CD\u4F5C\u7CFB\u7EDF\u7BA1\u7406\u8FDB\u7A0B\uFF0C\u5B9E\u5219\u662F\u5C06\u8FDB\u7A0B\u7684\u6709\u6548\u4FE1\u606F\u63D0\u53D6\u51FA\u6765\u7136\u540E\u901A\u8FC7\u7BA1\u7406\u8FD9\u4E9B\u4FE1\u606F\u6765\u7BA1\u7406\u8FDB\u7A0B\uFF0C\u800C\u6240\u6709\u7684\u8FDB\u7A0B\u4FE1\u606F\u88AB\u5B58\u653E\u5728\u4E00\u4E2A\u53EB\u505A <strong>\u8FDB\u7A0B\u63A7\u5236\u5757</strong> \u7684\u6570\u636E\u7ED3\u6784\u4E2D(\u53EF\u4EE5\u7406\u89E3\u4E3A\u8FDB\u7A0B\u5C5E\u6027\u7684\u96C6\u5408)\uFF0C\u8FD9\u4E5F\u5C31\u662F\u5373\u5C06\u8981\u4ECB\u7ECD\u7684\u8FDB\u7A0B\u63A7\u5236\u5757(<strong>PCB</strong>).</p>
<p>\u6BCF\u4E2A\u8FDB\u7A0B\u5728\u5185\u6838\u4E2D\u90FD\u6709\u4E00\u4E2A\u8FDB\u7A0B\u63A7\u5236\u5757(<strong>PCB</strong>)\u6765\u7EF4\u62A4\u8FDB\u7A0B\u76F8\u5173\u7684\u4FE1\u606F,Linux\u5185\u6838\u7684\u8FDB\u7A0B\u63A7\u5236\u5757\u662Ftask_struct\u7ED3\u6784\u4F53.</p>
<p><strong>task_struct</strong> \u662FLinux\u5185\u6838\u7684\u4E00\u79CD\u6570\u636E\u7ED3\u6784\uFF0C\u5B83\u4F1A\u88AB\u88C5\u8F7D\u5230RAM\u4E2D\u5E76\u4E14\u5305\u542B\u7740\u8FDB\u7A0B\u7684\u4FE1\u606F\u3002\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u628A\u5B83\u7684\u4FE1\u606F\u653E\u5728 <strong>task_struct</strong> \u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u4F53 \u5305\u542B\u4E86\u8FD9\u4E9B\u5185\u5BB9\uFF1A</p>
<blockquote>
<p>\u6807\u793A\u7B26\uFF1A \u63CF\u8FF0\u672C\u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6\u7B26\uFF0C\u7528\u6765\u533A\u522B\u5176\u4ED6\u8FDB\u7A0B\u3002
\u72B6\u6001 \uFF1A\u4EFB\u52A1\u72B6\u6001\uFF0C\u9000\u51FA\u4EE3\u7801\uFF0C\u9000\u51FA\u4FE1\u53F7\u7B49\u3002
\u4F18\u5148\u7EA7 \uFF1A\u76F8\u5BF9\u4E8E\u5176\u4ED6\u8FDB\u7A0B\u7684\u4F18\u5148\u7EA7\u3002
\u7A0B\u5E8F\u8BA1\u6570\u5668\uFF1A\u7A0B\u5E8F\u4E2D\u5373\u5C06\u88AB\u6267\u884C\u7684\u4E0B\u4E00\u6761\u6307\u4EE4\u7684\u5730\u5740\u3002
\u5185\u5B58\u6307\u9488\uFF1A\u5305\u62EC\u7A0B\u5E8F\u4EE3\u7801\u548C\u8FDB\u7A0B\u76F8\u5173\u6570\u636E\u7684\u6307\u9488\uFF0C\u8FD8\u6709\u548C\u5176\u4ED6\u8FDB\u7A0B\u5171\u4EAB\u7684\u5185\u5B58\u5757\u7684\u6307\u9488\u3002
\u4E0A\u4E0B\u6587\u6570\u636E\uFF1A\u8FDB\u7A0B\u6267\u884C\u65F6\u5904\u7406\u5668\u7684\u5BC4\u5B58\u5668\u4E2D\u7684\u6570\u636E\u3002
I/O\u72B6\u6001\u4FE1\u606F\uFF1A\u5305\u62EC\u663E\u793A\u7684I/O\u8BF7\u6C42,\u5206\u914D\u7ED9\u8FDB\u7A0B\u7684I/O\u8BBE\u5907\u548C\u88AB\u8FDB\u7A0B\u4F7F\u7528\u7684\u6587\u4EF6\u5217\u8868\u3002
\u8BB0\u8D26\u4FE1\u606F\uFF1A\u53EF\u80FD\u5305\u62EC\u5904\u7406\u5668\u65F6\u95F4\u603B\u548C\uFF0C\u4F7F\u7528\u7684\u65F6\u949F\u6570\u603B\u548C\uFF0C\u65F6\u95F4\u9650\u5236\uFF0C\u8BB0\u8D26\u53F7\u7B49\u3002</p>
</blockquote>
<p>\u6709\u5173\u8FDB\u7A0B\u4FE1\u606F\u8FD8\u6709\u4EE5\u4E0B\u4E09\u70B9\u9700\u8981\u4E86\u89E3\uFF1A</p>
<ol>
<li>\u4FDD\u5B58\u8FDB\u7A0B\u4FE1\u606F\u7684\u6570\u636E\u7ED3\u6784\u53EB\u505A task_struct\uFF0C\u53EF\u4EE5\u5728 <strong>include/linux/sched.h</strong> \u4E2D\u627E\u5230\u5B83\uFF1B</li>
<li>\u6240\u6709\u8FD0\u884C\u5728\u7CFB\u7EDF\u4E2D\u7684\u8FDB\u7A0B\u90FD\u4EE5 task_struct \u94FE\u8868\u7684\u5F62\u5F0F\u5B58\u5728\u5185\u6838\u4E2D\uFF1B</li>
<li>\u8FDB\u7A0B\u7684\u4FE1\u606F\u53EF\u4EE5\u901A\u8FC7 <strong>/proc</strong> \u7CFB\u7EDF\u6587\u4EF6\u5939\u67E5\u770B\u3002\u8981\u83B7\u53D6 <strong>PID</strong> \u4E3A400\u7684\u8FDB\u7A0B\u4FE1\u606F\uFF0C\u4F60\u9700\u8981\u67E5\u770B <strong>/proc/400</strong>  \u8FD9\u4E2A\u6587\u4EF6\u5939\u3002\u5927\u591A\u6570\u8FDB\u7A0B\u4FE1\u606F\u540C\u6837\u53EF\u4EE5\u4F7F\u7528 <strong>top</strong> \u548C <strong>ps</strong> \u8FD9\u4E9B\u7528\u6237\u7EA7\u5DE5\u5177\u6765\u83B7\u53D6,\u4F8B\u5982\uFF1A</li>
</ol>
<p><img src="image/linux_task_struct2.png" alt="pidlist"></p>
<h2>3.\u5256\u6790task_struct\u7ED3\u6784\u4F53</h2>
<h3>3.1 \u8FDB\u7A0B\u7684\u72B6\u6001</h3>
<pre><code>volatile long state;
</code></pre>
<p>state\u7684\u53EF\u80FD\u53D6\u503C\u4E3A\uFF1A</p>
<pre><code class="language-c">#define TASK_RUNNING        0//\u8FDB\u7A0B\u8981\u4E48\u6B63\u5728\u6267\u884C\uFF0C\u8981\u4E48\u51C6\u5907\u6267\u884C
#define TASK_INTERRUPTIBLE  1 //\u53EF\u4E2D\u65AD\u7684\u7761\u7720\uFF0C\u53EF\u4EE5\u901A\u8FC7\u4E00\u4E2A\u4FE1\u53F7\u5524\u9192
#define TASK_UNINTERRUPTIBLE    2 //\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\uFF0C\u4E0D\u53EF\u4EE5\u901A\u8FC7\u4FE1\u53F7\u8FDB\u884C\u5524\u9192
#define __TASK_STOPPED      4 //\u8FDB\u7A0B\u505C\u6B62\u6267\u884C
#define __TASK_TRACED       8 //\u8FDB\u7A0B\u88AB\u8FFD\u8E2A
/* in tsk-&gt;exit_state */ 
#define EXIT_ZOMBIE     16 //\u50F5\u5C38\u72B6\u6001\u7684\u8FDB\u7A0B\uFF0C\u8868\u793A\u8FDB\u7A0B\u88AB\u7EC8\u6B62\uFF0C\u4F46\u662F\u7236\u8FDB\u7A0B\u8FD8\u6CA1\u6709\u83B7\u53D6\u5B83\u7684\u7EC8\u6B62\u4FE1\u606F\uFF0C\u6BD4\u5982\u8FDB\u7A0B\u6709\u6CA1\u6709\u6267\u884C\u5B8C\u7B49\u4FE1\u606F\u3002                     
#define EXIT_DEAD       32 //\u8FDB\u7A0B\u7684\u6700\u7EC8\u72B6\u6001\uFF0C\u8FDB\u7A0B\u6B7B\u4EA1
/* in tsk-&gt;state again */ 
#define TASK_DEAD       64 //\u6B7B\u4EA1
#define TASK_WAKEKILL       128 //\u5524\u9192\u5E76\u6740\u6B7B\u7684\u8FDB\u7A0B
#define TASK_WAKING     256 //\u5524\u9192\u8FDB\u7A0B
</code></pre>
<p>\u8FDB\u7A0B\u72B6\u6001\u7684\u5207\u6362\u8FC7\u7A0B\u548C\u539F\u56E0\u5927\u81F4\u5982\u4E0B\u56FE\uFF08\u56FE\u7247\u6765\u81EA\u300ALinux Kernel Development\u300B\uFF09\uFF1A</p>
<p><img src="image/linux_task_struct3.png" alt="process_state"></p>
<h5>\u4E94\u4E2A\u4E92\u65A5\u72B6\u6001</h5>
<p>state\u57DF\u80FD\u591F\u53D65\u4E2A\u4E92\u4E3A\u6392\u65A5\u7684\u503C\uFF08\u901A\u4FD7\u4E00\u70B9\u5C31\u662F\u8FD9\u4E94\u4E2A\u503C\u4EFB\u610F\u4E24\u4E2A\u4E0D\u80FD\u4E00\u8D77\u4F7F\u7528\uFF0C\u53EA\u80FD\u5355\u72EC\u4F7F\u7528\uFF09\u3002\u7CFB\u7EDF\u4E2D\u7684\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u5FC5\u7136\u5904\u4E8E\u4EE5\u4E0A\u6240\u5217\u8FDB\u7A0B\u72B6\u6001\u4E2D\u7684\u4E00\u79CD\u3002</p>
<table>
<thead>
<tr>
<th>\u72B6\u6001</th>
<th>\u63CF\u8FF0</th>
</tr>
</thead>
<tbody>
<tr>
<td>TASK_RUNNING</td>
<td>\u8868\u793A\u8FDB\u7A0B\u8981\u4E48\u6B63\u5728\u6267\u884C\uFF0C\u8981\u4E48\u6B63\u8981\u51C6\u5907\u6267\u884C\uFF08\u5DF2\u7ECF\u5C31\u7EEA\uFF09\uFF0C\u6B63\u5728\u7B49\u5F85cpu\u65F6\u95F4\u7247\u7684\u8C03\u5EA6</td>
</tr>
<tr>
<td>TASK_INTERRUPTIBLE</td>
<td>\u8FDB\u7A0B\u56E0\u4E3A\u7B49\u5F85\u4E00\u4E9B\u6761\u4EF6\u800C\u88AB\u6302\u8D77\uFF08\u963B\u585E\uFF09\u800C\u6240\u5904\u7684\u72B6\u6001\u3002\u8FD9\u4E9B\u6761\u4EF6\u4E3B\u8981\u5305\u62EC\uFF1A\u786C\u4E2D\u65AD\u3001\u8D44\u6E90\u3001\u4E00\u4E9B\u4FE1\u53F7\u2026\u2026\uFF0C\u4E00\u65E6\u7B49\u5F85\u7684\u6761\u4EF6\u6210\u7ACB\uFF0C\u8FDB\u7A0B\u5C31\u4F1A\u4ECE\u8BE5\u72B6\u6001\uFF08\u963B\u585E\uFF09\u8FC5\u901F\u8F6C\u5316\u6210\u4E3A\u5C31\u7EEA\u72B6\u6001TASK_RUNNING</td>
</tr>
<tr>
<td>TASK_UNINTERRUPTIBLE</td>
<td>\u610F\u4E49\u4E0ETASK_INTERRUPTIBLE\u7C7B\u4F3C\uFF0C\u9664\u4E86\u4E0D\u80FD\u901A\u8FC7\u63A5\u53D7\u4E00\u4E2A\u4FE1\u53F7\u6765\u5524\u9192\u4EE5\u5916\uFF0C\u5BF9\u4E8E\u5904\u4E8ETASK_UNINTERRUPIBLE\u72B6\u6001\u7684\u8FDB\u7A0B\uFF0C\u54EA\u6015\u6211\u4EEC\u4F20\u9012\u4E00\u4E2A\u4FE1\u53F7\u6216\u8005\u6709\u4E00\u4E2A\u5916\u90E8\u4E2D\u65AD\u90FD\u4E0D\u80FD\u5524\u9192\u4ED6\u4EEC\u3002\u53EA\u6709\u5B83\u6240\u7B49\u5F85\u7684\u8D44\u6E90\u53EF\u7528\u7684\u65F6\u5019\uFF0C\u4ED6\u624D\u4F1A\u88AB\u5524\u9192\u3002\u8FD9\u4E2A\u6807\u5FD7\u5F88\u5C11\u7528\uFF0C\u4F46\u662F\u5E76\u4E0D\u4EE3\u8868\u6CA1\u6709\u4EFB\u4F55\u7528\u5904\uFF0C\u5176\u5B9E\u4ED6\u7684\u4F5C\u7528\u975E\u5E38\u5927\uFF0C\u7279\u522B\u662F\u5BF9\u4E8E\u9A71\u52A8\u523A\u63A2\u76F8\u5173\u7684\u786C\u4EF6\u8FC7\u7A0B\u5F88\u91CD\u8981\uFF0C\u8FD9\u4E2A\u523A\u63A2\u8FC7\u7A0B\u4E0D\u80FD\u88AB\u4E00\u4E9B\u5176\u4ED6\u7684\u4E1C\u897F\u7ED9\u4E2D\u65AD\uFF0C\u5426\u5219\u5C31\u4F1A\u8BA9\u8FDB\u57CE\u8FDB\u5165\u4E0D\u53EF\u9884\u6D4B\u7684\u72B6\u6001</td>
</tr>
<tr>
<td>TASK_STOPPED</td>
<td>\u8FDB\u7A0B\u88AB\u505C\u6B62\u6267\u884C\uFF0C\u5F53\u8FDB\u7A0B\u63A5\u6536\u5230SIGSTOP\u3001SIGTTIN\u3001SIGTSTP\u6216\u8005SIGTTOU\u4FE1\u53F7\u4E4B\u540E\u5C31\u4F1A\u8FDB\u5165\u8BE5\u72B6\u6001</td>
</tr>
<tr>
<td>TASK_TRACED</td>
<td>\u8868\u793A\u8FDB\u7A0B\u88ABdebugger\u7B49\u8FDB\u7A0B\u76D1\u89C6\uFF0C\u8FDB\u7A0B\u6267\u884C\u88AB\u8C03\u8BD5\u7A0B\u5E8F\u6240\u505C\u6B62\uFF0C\u5F53\u4E00\u4E2A\u8FDB\u7A0B\u88AB\u53E6\u5916\u7684\u8FDB\u7A0B\u6240\u76D1\u89C6\uFF0C\u6BCF\u4E00\u4E2A\u4FE1\u53F7\u90FD\u4F1A\u8BA9\u8FDB\u57CE\u8FDB\u5165\u8BE5\u72B6\u6001</td>
</tr>
</tbody>
</table>
<h5>2\u4E2A\u7EC8\u6B62\u72B6\u6001</h5>
<pre><code class="language-c">/* task state */
int exit_state;
int exit_code, exit_signal;
</code></pre>
<table>
<thead>
<tr>
<th>\u72B6\u6001</th>
<th>\u63CF\u8FF0</th>
</tr>
</thead>
<tbody>
<tr>
<td>EXIT_ZOMBIE</td>
<td>\u8FDB\u7A0B\u7684\u6267\u884C\u88AB\u7EC8\u6B62\uFF0C\u4F46\u662F\u5176\u7236\u8FDB\u7A0B\u8FD8\u6CA1\u6709\u4F7F\u7528wait()\u7B49\u7CFB\u7EDF\u8C03\u7528\u6765\u83B7\u77E5\u5B83\u7684\u7EC8\u6B62\u4FE1\u606F\uFF0C\u6B64\u65F6\u8FDB\u7A0B\u6210\u4E3A\u50F5\u5C38\u8FDB\u7A0B</td>
</tr>
<tr>
<td>EXIT_DEAD</td>
<td>\u8FDB\u7A0B\u7684\u6700\u7EC8\u72B6\u6001</td>
</tr>
</tbody>
</table>
<h5>\u65B0\u589E\u7761\u7720\u72B6\u6001</h5>
<p>Linux \u5185\u6838\u63D0\u4F9B\u4E86\u4E24\u79CD\u65B9\u6CD5\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u7761\u7720\u72B6\u6001\u3002</p>
<ul>
<li>\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u7761\u7720\u72B6\u6001\u7684\u666E\u901A\u65B9\u6CD5\u662F\u5C06\u8FDB\u7A0B\u72B6\u6001\u8BBE\u7F6E\u4E3A TASK_INTERRUPTIBLE \u6216 TASK_UNINTERRUPTIBLE \u5E76\u8C03\u7528\u8C03\u5EA6\u7A0B\u5E8F\u7684 schedule() \u51FD\u6570\u3002\u8FD9\u6837\u4F1A\u5C06\u8FDB\u7A0B\u4ECE CPU \u8FD0\u884C\u961F\u5217\u4E2D\u79FB\u9664\u3002</li>
<li>\u5982\u679C\u8FDB\u7A0B\u5904\u4E8E <strong>\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001</strong>\uFF08\u901A\u8FC7\u5C06\u5176\u72B6\u6001\u8BBE\u7F6ETASK_INTERRUPTIBLE\uFF09\uFF0C\u90A3\u4E48\u53EF\u4EE5\u901A\u8FC7\u663E\u5F0F\u7684\u5524\u9192\u547C\u53EB\uFF08wakeup_process()\uFF09\u6216\u9700\u8981\u5904\u7406\u7684\u4FE1\u53F7\u6765\u5524\u9192\u5B83\u3002</li>
<li>\u4F46\u662F\uFF0C\u5982\u679C\u8FDB\u7A0B\u5904\u4E8E <strong>\u975E\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001</strong>\uFF08\u901A\u8FC7\u5C06\u5176\u72B6\u6001\u8BBE\u7F6E\u4E3A TASK_UNINTERRUPTIBLE\uFF09\uFF0C\u90A3\u4E48\u53EA\u80FD\u901A\u8FC7\u663E\u5F0F\u7684\u5524\u9192\u547C\u53EB\u5C06\u5176\u5524\u9192\u3002\u9664\u975E\u4E07\u4E0D\u5F97\u5DF2\uFF0C\u5426\u5219\u6211\u4EEC\u5EFA\u8BAE\u60A8\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\uFF0C\u800C\u4E0D\u662F\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\uFF08\u6BD4\u5982\u8BF4\u5728\u8BBE\u5907 I/O \u671F\u95F4\uFF0C\u5904\u7406\u4FE1\u53F7\u975E\u5E38\u56F0\u96BE\u65F6\uFF09\u3002
\u5F53\u5904\u4E8E\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\u7684\u4EFB\u52A1\u63A5\u6536\u5230\u4FE1\u53F7\u65F6\uFF0C\u5B83\u9700\u8981\u5904\u7406\u8BE5\u4FE1\u53F7\uFF08\u9664\u975E\u5B83\u5DF2\u88AB\u5C4F\u5F0A\uFF09\uFF0C\u79BB\u5F00\u4E4B\u524D\u6B63\u5728\u5904\u7406\u7684\u4EFB\u52A1\uFF08\u6B64\u5904\u9700\u8981\u6E05\u9664\u4EE3\u7801\uFF09\uFF0C\u5E76\u5C06 -EINTR \u8FD4\u56DE\u7ED9\u7528\u6237\u7A7A\u95F4\u3002\u518D\u4E00\u6B21\uFF0C\u68C0\u67E5\u8FD9\u4E9B\u8FD4\u56DE\u4EE3\u7801\u548C\u91C7\u53D6\u9002\u5F53\u64CD\u4F5C\u7684\u5DE5\u4F5C\u5C06\u7531\u7A0B\u5E8F\u5458\u5B8C\u6210\u3002</li>
</ul>
<p>\u56E0\u6B64\uFF0C\u61D2\u60F0\u7684\u7A0B\u5E8F\u5458\u53EF\u80FD\u6BD4\u8F83\u559C\u6B22\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u4E0D\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001\uFF0C\u56E0\u4E3A\u4FE1\u53F7\u4E0D\u4F1A\u5524\u9192\u8FD9\u7C7B\u4EFB\u52A1\u3002</p>
<p>\u4F46\u9700\u8981\u6CE8\u610F\u7684\u4E00\u79CD\u60C5\u51B5\u662F\uFF0C\u5BF9\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\u7684\u8FDB\u7A0B\u7684\u5524\u9192\u547C\u53EB\u53EF\u80FD\u4F1A\u7531\u4E8E\u67D0\u4E9B\u539F\u56E0\u4E0D\u4F1A\u53D1\u751F\uFF0C\u8FD9\u4F1A\u4F7F\u8FDB\u7A0B\u65E0\u6CD5\u88AB\u7EC8\u6B62\uFF0C\u4ECE\u800C\u6700\u7EC8\u5F15\u53D1\u95EE\u9898\uFF0C\u56E0\u4E3A\u60DF\u4E00\u7684\u89E3\u51B3\u65B9\u6CD5\u5C31\u662F\u91CD\u542F\u7CFB\u7EDF\u3002\u4E00\u65B9\u9762\uFF0C\u60A8\u9700\u8981\u8003\u8651\u4E00\u4E9B\u7EC6\u8282\uFF0C\u56E0\u4E3A\u4E0D\u8FD9\u6837\u505A\u4F1A\u5728\u5185\u6838\u7AEF\u548C\u7528\u6237\u7AEF\u5F15\u5165 bug\u3002\u53E6\u4E00\u65B9\u9762\uFF0C\u60A8\u53EF\u80FD\u4F1A\u751F\u6210\u6C38\u8FDC\u4E0D\u4F1A\u505C\u6B62\u7684\u8FDB\u7A0B\uFF08\u88AB\u963B\u585E\u4E14\u65E0\u6CD5\u7EC8\u6B62\u7684\u8FDB\u7A0B\uFF09\u3002</p>
<p>\u73B0\u5728\uFF0C\u6211\u4EEC\u5728\u5185\u6838\u4E2D\u5B9E\u73B0\u4E86\u4E00\u79CD\u65B0\u7684\u7761\u7720\u65B9\u6CD5</p>
<table>
<thead>
<tr>
<th>\u72B6\u6001</th>
<th>\u63CF\u8FF0</th>
</tr>
</thead>
<tbody>
<tr>
<td>TASK_KILLABLE</td>
<td>\u5F53\u8FDB\u7A0B\u5904\u4E8E\u8FD9\u79CD\u53EF\u4EE5\u7EC8\u6B62\u7684\u65B0\u7761\u7720\u72B6\u6001\u4E2D\uFF0C\u5B83\u7684\u8FD0\u884C\u539F\u7406\u7C7B\u4F3C\u4E8E TASK_UNINTERRUPTIBLE\uFF0C\u53EA\u4E0D\u8FC7\u53EF\u4EE5\u54CD\u5E94\u81F4\u547D\u4FE1\u53F7</td>
</tr>
</tbody>
</table>
<p>\u6362\u53E5\u8BDD\u8BF4\uFF0C<strong>ASK_UNINTERRUPTIBLE + TASK_WAKEKILL = TASK_KILLABLE</strong> \u3002\u800CTASK_WAKEKILL \u7528\u4E8E\u5728\u63A5\u6536\u5230\u81F4\u547D\u4FE1\u53F7\u65F6\u5524\u9192\u8FDB\u7A0B\uFF0C\u65B0\u7684\u7761\u7720\u72B6\u6001\u5141\u8BB8 TASK_UNINTERRUPTIBLE \u54CD\u5E94\u81F4\u547D\u4FE1\u53F7\u3002</p>
<h3>3.2 \u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6(pid)</h3>
<pre><code>pid_t pid;//\u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6
pid_t tgid;// \u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\u7684pid\u6210\u5458\u7684\u503C
</code></pre>
<p>\u5728Linux\u7CFB\u7EDF\u4E2D\uFF0C\u4E00\u4E2A\u7EBF\u7A0B\u7EC4\u4E2D\u7684\u6240\u6709\u7EBF\u7A0B\u4F7F\u7528\u548C\u8BE5\u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\uFF08\u8BE5\u7EC4\u4E2D\u7684\u7B2C\u4E00\u4E2A\u8F7B\u91CF\u7EA7\u8FDB\u7A0B\uFF09\u76F8\u540C\u7684PID\uFF0C\u5E76\u88AB\u5B58\u653E\u5728tgid\u6210\u5458\u4E2D\u3002<strong>\u53EA\u6709\u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\u7684pid\u6210\u5458\u624D\u4F1A\u88AB\u8BBE\u7F6E\u4E3A\u4E0Etgid\u76F8\u540C\u7684\u503C</strong> \u3002\u6CE8\u610F\uFF0Cgetpid()\u7CFB\u7EDF\u8C03\u7528\u8FD4\u56DE\u7684\u662F\u5F53\u524D\u8FDB\u7A0B\u7684tgid\u503C\u800C\u4E0D\u662Fpid\u503C\u3002\uFF08\u7EBF\u7A0B\u662F\u7A0B\u5E8F\u8FD0\u884C\u7684\u6700\u5C0F\u5355\u4F4D\uFF0C\u8FDB\u7A0B\u662F\u7A0B\u5E8F\u8FD0\u884C\u7684\u57FA\u672C\u5355\u4F4D\u3002\uFF09</p>
<h2>3.3 \u8FDB\u7A0B\u5185\u6838\u6808</h2>
<pre><code>void *stack;
</code></pre>
<p>\u8FDB\u7A0B\u901A\u8FC7 <strong>alloc_thread_info</strong> \u51FD\u6570\u5206\u914D\u5B83\u7684\u5185\u6838\u6808\uFF0C\u901A\u8FC7      <strong>free_thread_info</strong> \u51FD\u6570\u91CA\u653E\u6240\u5206\u914D\u7684\u5185\u6838\u6808\u3002</p>
<pre><code class="language-c">/* linux-2.6.38.8/kernel/fork.c */ 
static inline struct thread_info *alloc_thread_info(struct task_struct *tsk)
{
	#ifdef CONFIG_DEBUG_STACK_USAGE
		gfp_t mask = GFP_KERNEL | __GFP_ZERO;
	#else
		gfp_t mask = GFP_KERNEL;
	#endif
		return (struct thread_info *)__get_free_pages(mask, THREAD_SIZE_ORDER);
}
static inline void free_thread_info(struct thread_info *ti)
{
	free_pages((unsigned long)ti, THREAD_SIZE_ORDER);
}
</code></pre>
<p>\u5176\u4E2D\uFF0CTHREAD_SIZE_ORDER\u5B8F\u5728linux-2.6.38.8/arch/arm/include/asm/thread_info.h\u6587\u4EF6\u4E2D\u88AB\u5B9A\u4E49\u4E3A1\uFF0C\u4E5F\u5C31\u662F\u8BF4alloc_thread_info\u51FD\u6570\u901A\u8FC7\u8C03\u7528 <strong>get_free_pages</strong> \u51FD\u6570\u5206\u914D2\u4E2A\u9875\u7684\u5185\u5B58\uFF08\u5B83\u7684\u9996\u5730\u5740\u662F8192\u5B57\u8282\u5BF9\u9F50\u7684\uFF09\u3002
Linux\u5185\u6838\u901A\u8FC7 <strong>thread_union</strong> \u8054\u5408\u4F53\u6765\u8868\u793A\u8FDB\u7A0B\u7684\u5185\u6838\u6808\uFF0C\u5176\u4E2DTHREAD_SIZE\u5B8F\u7684\u5927\u5C0F\u4E3A8192\u3002</p>
<pre><code class="language-c">union thread_union {
   struct thread_info thread_info;
   unsigned long stack[THREAD_SIZE/sizeof(long)];
};
</code></pre>
<p>\u5F53\u8FDB\u7A0B\u4ECE\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u65F6\uFF0C\u8FDB\u7A0B\u7684\u5185\u6838\u6808\u603B\u662F\u7A7A\u7684\uFF0C\u6240\u4EE5ARM\u7684sp\u5BC4\u5B58\u5668\u6307\u5411\u8FD9\u4E2A\u6808\u7684\u9876\u7AEF\u3002\u56E0\u6B64\uFF0C\u5185\u6838\u80FD\u591F\u8F7B\u6613\u5730\u901A\u8FC7sp\u5BC4\u5B58\u5668\u83B7\u5F97\u5F53\u524D\u6B63\u5728CPU\u4E0A\u8FD0\u884C\u7684\u8FDB\u7A0B\u3002</p>
<pre><code class="language-c">/* linux-2.6.38.8/arch/arm/include/asm/current.h */
static inline struct task_struct *get_current(void)
{
	return current_thread_info()-&gt;task;
}
 
#define current (get_current())
 
/* linux-2.6.38.8/arch/arm/include/asm/thread_info.h */ 
static inline struct thread_info *current_thread_info(void)
{
	register unsigned long sp asm (&quot;sp&quot;);
	return (struct thread_info *)(sp &amp; ~(THREAD_SIZE - 1));
}
</code></pre>
<p>\u8FDB\u7A0B\u5185\u6838\u6808\u4E0E\u8FDB\u7A0B\u63CF\u8FF0\u7B26\u7684\u5173\u7CFB\u5982\u4E0B\u56FE\uFF1A
<img src="images/linux_task_struct4.png" alt="prostack"></p>
<h3>3.4 \u8FDB\u7A0B\u7684\u6807\u8BB0</h3>
<pre><code>unsigned int flags; //flags\u6210\u5458\u7684\u53EF\u80FD\u53D6\u503C\u5982\u4E0B
</code></pre>
<pre><code class="language-c">#define PF_ALIGNWARN    0x00000001    /* Print alignment warning msgs */
                    /* Not implemented yet, only for 486*/
#define PF_STARTING    0x00000002    /* being created */
#define PF_EXITING    0x00000004    /* getting shut down */
#define PF_EXITPIDONE    0x00000008    /* pi exit done on shut down */
#define PF_VCPU        0x00000010    /* I'm a virtual CPU */
#define PF_FORKNOEXEC    0x00000040    /* forked but didn't exec */
#define PF_MCE_PROCESS  0x00000080      /* process policy on mce errors */
#define PF_SUPERPRIV    0x00000100    /* used super-user privileges */
#define PF_DUMPCORE    0x00000200    /* dumped core */
#define PF_SIGNALED    0x00000400    /* killed by a signal */
#define PF_MEMALLOC    0x00000800    /* Allocating memory */
#define PF_FLUSHER    0x00001000    /* responsible for disk writeback */
#define PF_USED_MATH    0x00002000    /* if unset the fpu must be initialized before use */
#define PF_FREEZING    0x00004000    /* freeze in progress. do not account to load */
#define PF_NOFREEZE    0x00008000    /* this thread should not be frozen */
#define PF_FROZEN    0x00010000    /* frozen for system suspend */
#define PF_FSTRANS    0x00020000    /* inside a filesystem transaction */
#define PF_KSWAPD    0x00040000    /* I am kswapd */
#define PF_OOM_ORIGIN    0x00080000    /* Allocating much memory to others */
#define PF_LESS_THROTTLE 0x00100000    /* Throttle me less: I clean memory */
#define PF_KTHREAD    0x00200000    /* I am a kernel thread */
#define PF_RANDOMIZE    0x00400000    /* randomize virtual address space */
#define PF_SWAPWRITE    0x00800000    /* Allowed to write to swap */
#define PF_SPREAD_PAGE    0x01000000    /* Spread page cache over cpuset */
#define PF_SPREAD_SLAB    0x02000000    /* Spread some slab caches over cpuset */
#define PF_THREAD_BOUND    0x04000000    /* Thread bound to specific cpu */
#define PF_MCE_EARLY    0x08000000      /* Early kill for mce process policy */
#define PF_MEMPOLICY    0x10000000    /* Non-default NUMA mempolicy */
#define PF_MUTEX_TESTER    0x20000000    /* Thread belongs to the rt mutex tester */
#define PF_FREEZER_SKIP    0x40000000    /* Freezer should not count it as freezeable */
#define PF_FREEZER_NOSIG 0x80000000    /* Freezer won't send signals to it */
</code></pre>
<h3>3.5 \u8FDB\u7A0B\u4E4B\u95F4\u7684\u4EB2\u5C5E\u5173\u7CFB</h3>
<pre><code>struct task_struct *real_parent; /* real parent process */
struct task_struct *parent; /* recipient of SIGCHLD, wait4() reports */
struct list_head children;    /* list of my children */
struct list_head sibling;    /* linkage in my parent's children list */
struct task_struct *group_leader;    /* threadgroup leader */
</code></pre>
<p>\u5728Linux\u7CFB\u7EDF\u4E2D\uFF0C\u6240\u6709\u8FDB\u7A0B\u4E4B\u95F4\u90FD\u6709\u7740\u76F4\u63A5\u6216\u95F4\u63A5\u5730\u8054\u7CFB\uFF0C\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u6709\u5176\u7236\u8FDB\u7A0B\uFF0C\u4E5F\u53EF\u80FD\u6709\u96F6\u4E2A\u6216\u591A\u4E2A\u5B50\u8FDB\u7A0B\u3002\u62E5\u6709\u540C\u4E00\u7236\u8FDB\u7A0B\u7684\u6240\u6709\u8FDB\u7A0B\u5177\u6709\u5144\u5F1F\u5173\u7CFB\u3002</p>
<ul>
<li><strong>real_parent</strong> \u6307\u5411\u5176\u7236\u8FDB\u7A0B\uFF0C\u5982\u679C\u521B\u5EFA\u5B83\u7684\u7236\u8FDB\u7A0B\u4E0D\u518D\u5B58\u5728\uFF0C\u5219\u6307\u5411PID\u4E3A1\u7684init\u8FDB\u7A0B\u3002</li>
<li><strong>parent</strong> \u6307\u5411\u5176\u7236\u8FDB\u7A0B\uFF0C\u5F53\u5B83\u7EC8\u6B62\u65F6\uFF0C\u5FC5\u987B\u5411\u5B83\u7684\u7236\u8FDB\u7A0B\u53D1\u9001\u4FE1\u53F7\u3002\u5B83\u7684\u503C\u901A\u5E38\u4E0E** real_parent**\u76F8\u540C\u3002</li>
<li><strong>children</strong> \u8868\u793A\u94FE\u8868\u7684\u5934\u90E8\uFF0C\u94FE\u8868\u4E2D\u7684\u6240\u6709\u5143\u7D20\u90FD\u662F\u5B83\u7684\u5B50\u8FDB\u7A0B\uFF08\u8FDB\u7A0B\u7684\u5B50\u8FDB\u7A0B\u94FE\u8868\uFF09\u3002</li>
<li><strong>sibling</strong> \u7528\u4E8E\u628A\u5F53\u524D\u8FDB\u7A0B\u63D2\u5165\u5230\u5144\u5F1F\u94FE\u8868\u4E2D\uFF08\u8FDB\u7A0B\u7684\u5144\u5F1F\u94FE\u8868\uFF09\u3002</li>
<li><strong>group_leader</strong> \u6307\u5411\u5176\u6240\u5728\u8FDB\u7A0B\u7EC4\u7684\u9886\u5934\u8FDB\u7A0B\u3002</li>
</ul>
<h3>3.6 \u8FDB\u7A0B\u8C03\u5EA6\u4FE1\u606F</h3>
<pre><code> int prio, static_prio, normal_prio;
 unsigned int rt_priority;
 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
 unsigned int policy;
</code></pre>
<p>\u5B9E\u65F6\u4F18\u5148\u7EA7\u8303\u56F4\u662F0\u5230MAX_RT_PRIO-1\uFF08\u537399\uFF09\uFF0C\u800C\u666E\u901A\u8FDB\u7A0B\u7684\u9759\u6001\u4F18\u5148\u7EA7\u8303\u56F4\u662F\u4ECEMAX_RT_PRIO\u5230MAX_PRIO-1\uFF08\u5373100\u5230139)\u3002\u503C\u8D8A\u5927\u9759\u6001\u4F18\u5148\u7EA7\u8D8A\u4F4E\u3002</p>
<ul>
<li><strong>static_prio</strong> \u7528\u4E8E\u4FDD\u5B58\u9759\u6001\u4F18\u5148\u7EA7\uFF0C\u53EF\u4EE5\u901A\u8FC7nice\u7CFB\u7EDF\u8C03\u7528\u6765\u8FDB\u884C\u4FEE\u6539\u3002</li>
<li><strong>rt_priority</strong> \u7528\u4E8E\u4FDD\u5B58\u5B9E\u65F6\u4F18\u5148\u7EA7\u3002</li>
<li><strong>normal_prio</strong> \u7684\u503C\u53D6\u51B3\u4E8E\u9759\u6001\u4F18\u5148\u7EA7\u548C\u8C03\u5EA6\u7B56\u7565(\u8FDB\u7A0B\u7684\u8C03\u5EA6\u7B56\u7565\u6709\uFF1A\u5148\u6765\u5148\u670D\u52A1\uFF0C\u77ED\u4F5C\u4E1A\u4F18\u5148\u3001\u65F6\u95F4\u7247\u8F6E\u8F6C\u3001\u9AD8\u54CD\u5E94\u6BD4\u4F18\u5148\u7B49\u7B49\u7684\u8C03\u5EA6\u7B97\u6CD5\u3002</li>
<li><strong>prio</strong> \u7528\u4E8E\u4FDD\u5B58\u52A8\u6001\u4F18\u5148\u7EA7\u3002</li>
<li><strong>se\u548Crt</strong> \u90FD\u662F\u8C03\u7528\u5B9E\u4F53\uFF0C\u4E00\u4E2A\u7528\u4E8E\u666E\u901A\u8FDB\u7A0B\uFF0C\u4E00\u4E2A\u7528\u4E8E\u5B9E\u65F6\u8FDB\u7A0B\uFF0C\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u6709\u5176\u4E2D\u4E4B\u4E00\u7684\u5B9E\u4F53\u3002</li>
<li><strong>cpus_allowed</strong> \u7528\u4E8E\u63A7\u5236\u8FDB\u7A0B\u53EF\u4EE5\u5728\u54EA\u91CC\u5904\u7406\u5668\u4E0A\u8FD0\u884C\u3002</li>
<li><strong>policy</strong> \u8868\u793A\u8FDB\u7A0B\u7684\u8C03\u5EA6\u7B56\u7565\uFF0C\u76EE\u524D\u4E3B\u8981\u6709\u4EE5\u4E0B\u4E94\u79CD\uFF1A</li>
</ul>
<pre><code class="language-c">#define SCHED_NORMAL        0//\u6309\u7167\u4F18\u5148\u7EA7\u8FDB\u884C\u8C03\u5EA6\uFF08\u6709\u4E9B\u5730\u65B9\u4E5F\u8BF4\u662FCFS\u8C03\u5EA6\u5668\uFF09
#define SCHED_FIFO        1//\u5148\u8FDB\u5148\u51FA\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_RR        2//\u65F6\u95F4\u7247\u8F6E\u8F6C\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_BATCH        3//\u7528\u4E8E\u975E\u4EA4\u4E92\u7684\u5904\u7406\u673A\u6D88\u8017\u578B\u7684\u8FDB\u7A0B
#define SCHED_IDLE        5//\u7CFB\u7EDF\u8D1F\u8F7D\u5F88\u4F4E\u65F6\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_RESET_ON_FORK     0x40000000
</code></pre>
<ul>
<li><strong>SCHED_NORMAL</strong> \u7528\u4E8E\u666E\u901A\u8FDB\u7A0B\uFF0C\u901A\u8FC7CFS\u8C03\u5EA6\u5668\u5B9E\u73B0;</li>
<li><strong>SCHED_BATCH</strong> \u7528\u4E8E\u975E\u4EA4\u4E92\u7684\u5904\u7406\u5668\u6D88\u8017\u578B\u8FDB\u7A0B;</li>
<li><strong>SCHED_IDLE</strong> \u662F\u5728\u7CFB\u7EDF\u8D1F\u8F7D\u5F88\u4F4E\u65F6\u4F7F\u7528;</li>
<li><strong>SCHED_FIFO</strong>\uFF08\u5148\u5165\u5148\u51FA\u8C03\u5EA6\u7B97\u6CD5\uFF09\u548C <strong>SCHED_RR</strong>\uFF08\u8F6E\u6D41\u8C03\u5EA6\u7B97\u6CD5\uFF09\u90FD\u662F\u5B9E\u65F6\u8C03\u5EA6\u7B56\u7565.</li>
</ul>
<h3>3.7 ptrace\u7CFB\u7EDF\u8C03\u7528</h3>
<pre><code>unsigned int ptrace;  
struct list_head ptraced;  
struct list_head ptrace_entry;  
unsigned long ptrace_message;  
siginfo_t *last_siginfo;      /* For ptrace use.  */  
ifdef CONFIG_HAVE_HW_BREAKPOINT  
atomic_t ptrace_bp_refcnt;  
</code></pre>
<p>\u6210\u5458ptrace\u88AB\u8BBE\u7F6E\u4E3A0\u65F6\u8868\u793A\u4E0D\u9700\u8981\u88AB\u8DDF\u8E2A\uFF0C\u5B83\u7684\u53EF\u80FD\u53D6\u503C\u5982\u4E0B\uFF1A</p>
<pre><code class="language-c">/* linux-2.6.38.8/include/linux/ptrace.h */  
#define PT_PTRACED  0x00000001  
#define PT_DTRACE   0x00000002  /* delayed trace (used on m68k, i386) */  
#define PT_TRACESYSGOOD 0x00000004  
#define PT_PTRACE_CAP   0x00000008  /* ptracer can follow suid-exec */  
#define PT_TRACE_FORK   0x00000010  
#define PT_TRACE_VFORK  0x00000020  
#define PT_TRACE_CLONE  0x00000040  
#define PT_TRACE_EXEC   0x00000080  
#define PT_TRACE_VFORK_DONE 0x00000100  
#define PT_TRACE_EXIT   0x00000200  
</code></pre>
<h3>3.8 Performance Event</h3>
<pre><code>#ifdef CONFIG_PERF_EVENTS
	struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
	struct mutex perf_event_mutex;
	struct list_head perf_event_list;
#endif
</code></pre>
<p>Performance Event\u662F\u4E00\u6B3E\u968F Linux \u5185\u6838\u4EE3\u7801\u4E00\u540C\u53D1\u5E03\u548C\u7EF4\u62A4\u7684\u6027\u80FD\u8BCA\u65AD\u5DE5\u5177\u3002\u8FD9\u4E9B\u6210\u5458\u7528\u4E8E\u5E2E\u52A9PerformanceEvent\u5206\u6790\u8FDB\u7A0B\u7684\u6027\u80FD\u95EE\u9898\u3002</p>
<pre><code>\u5173\u4E8EPerformance Event\u5DE5\u5177\u7684\u4ECB\u7ECD\u53EF\u53C2\u8003\u6587\u7AE0http://www.ibm.com/developerworks/cn/linux/l-cn-perf1/index.html?ca=drs-#major1\u548Chttp://www.ibm.com/developerworks/cn/linux/l-cn-perf2/index.html?ca=drs-#major1\u3002
</code></pre>
<h3>3.9 \u65F6\u95F4\u6570\u636E\u6210\u5458</h3>
<p>\u4E00\u4E2A\u8FDB\u7A0B\u4ECE\u521B\u5EFA\u5230\u7EC8\u6B62\u53EB\u505A\u8BE5\u8FDB\u7A0B\u7684\u751F\u5B58\u671F\uFF0C\u8FDB\u7A0B\u5728 <strong>\u5176\u751F\u5B58\u671F\u5185\u4F7F\u7528CPU\u65F6\u95F4</strong>\uFF0C\u5185\u6838\u90FD\u9700\u8981\u8FDB\u884C\u8BB0\u5F55\uFF0C\u8FDB\u7A0B\u8017\u8D39\u7684\u65F6\u95F4\u5206\u4E3A\u4E24\u90E8\u5206\uFF0C\u4E00\u90E8\u5206\u662F\u7528\u6237\u6A21\u5F0F\u4E0B\u8017\u8D39\u7684\u65F6\u95F4\uFF0C\u4E00\u90E8\u5206\u662F\u5728\u7CFB\u7EDF\u6A21\u5F0F\u4E0B\u8017\u8D39\u7684\u65F6\u95F4</p>
<pre><code>cputime_t utime, stime, utimescaled, stimescaled;
cputime_t gtime;
cputime_t prev_utime, prev_stime;//\u8BB0\u5F55\u5F53\u524D\u7684\u8FD0\u884C\u65F6\u95F4\uFF08\u7528\u6237\u6001\u548C\u5185\u6838\u6001\uFF09
unsigned long nvcsw, nivcsw; //\u81EA\u613F/\u975E\u81EA\u613F\u4E0A\u4E0B\u6587\u5207\u6362\u8BA1\u6570
struct timespec start_time;  //\u8FDB\u7A0B\u7684\u5F00\u59CB\u6267\u884C\u65F6\u95F4    
struct timespec real_start_time;  //\u8FDB\u7A0B\u771F\u6B63\u7684\u5F00\u59CB\u6267\u884C\u65F6\u95F4
unsigned long min_flt, maj_flt;
struct task_cputime cputime_expires;//cpu\u6267\u884C\u7684\u6709\u6548\u65F6\u95F4
struct list_head cpu_timers[3];//\u7528\u6765\u7EDF\u8BA1\u8FDB\u7A0B\u6216\u8FDB\u7A0B\u7EC4\u88AB\u5904\u7406\u5668\u8FFD\u8E2A\u7684\u65F6\u95F4
struct list_head run_list;
unsigned long timeout;//\u5F53\u524D\u5DF2\u4F7F\u7528\u7684\u65F6\u95F4\uFF08\u4E0E\u5F00\u59CB\u65F6\u95F4\u7684\u5DEE\u503C\uFF09
unsigned int time_slice;//\u8FDB\u7A0B\u7684\u65F6\u95F4\u7247\u7684\u5927\u5C0F
int nr_cpus_allowed;
</code></pre>
<h3>3.8 \u4FE1\u53F7\u5904\u7406\u4FE1\u606F</h3>
<pre><code>struct signal_struct *signal;//\u6307\u5411\u8FDB\u7A0B\u4FE1\u53F7\u63CF\u8FF0\u7B26
struct sighand_struct *sighand;//\u6307\u5411\u8FDB\u7A0B\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u63CF\u8FF0\u7B26
sigset_t blocked, real_blocked;//\u963B\u585E\u4FE1\u53F7\u7684\u63A9\u7801
sigset_t saved_sigmask;    /* restored if set_restore_sigmask() was used */
struct sigpending pending;//\u8FDB\u7A0B\u4E0A\u8FD8\u9700\u8981\u5904\u7406\u7684\u4FE1\u53F7
unsigned long sas_ss_sp;//\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u5907\u7528\u5806\u6808\u7684\u5730\u5740
size_t sas_ss_size;//\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u7684\u5806\u6808\u7684\u5730\u5740
</code></pre>
<h3>3.9 \u6587\u4EF6\u7CFB\u7EDF\u4FE1\u606F</h3>
<pre><code>/* filesystem information */
struct fs_struct *fs;//\u6587\u4EF6\u7CFB\u7EDF\u7684\u4FE1\u606F\u7684\u6307\u9488
/* open file information */
struct files_struct *files;//\u6253\u5F00\u6587\u4EF6\u7684\u4FE1\u606F\u6307\u9488
</code></pre>
`,r=t(`<p>\u53C2\u8003\uFF1A <a href="https://www.jianshu.com/p/691d02380312">https://www.jianshu.com/p/691d02380312</a><a href="https://blog.csdn.net/npy_lp/article/details/7292563">https://blog.csdn.net/npy_lp/article/details/7292563</a><a href="https://blog.csdn.net/gatieme/article/details/51383272">https://blog.csdn.net/gatieme/article/details/51383272</a></p><h2>1.\u9996\u5148\u4EC0\u4E48\u662F\u8FDB\u7A0B\uFF1F</h2><h3>1.1\u8FDB\u7A0B\u53EF\u4EE5\u8FD9\u6837\u63CF\u8FF0\uFF1A</h3><p>\u8FDB\u7A0B\u662F\u7A0B\u5E8F\u7684\u4E00\u4E2A\u6267\u884C\u5B9E\u4F8B\uFF1B \u8FDB\u7A0B\u662F\u6B63\u5728\u6267\u884C\u7684\u7A0B\u5E8F\uFF1B \u8FDB\u7A0B\u662F\u80FD\u5206\u914D\u5904\u7406\u5668\u5E76\u7531\u5904\u7406\u5668\u6267\u884C\u7684\u5B9E\u4F53\u3002 \u6309\u5185\u6838\u89C2\u70B9\u6765\u8C08\u8FDB\u7A0B\uFF1A\u5B83\u62C5\u5F53\u5206\u914D\u7CFB\u7EDF\u8D44\u6E90\uFF08CPU\u65F6\u95F4\uFF0C\u5185\u5B58\uFF09\u7684\u5B9E\u4F53\u3002</p><h3>1.2\u8FDB\u7A0B\u7684\u4E24\u4E2A\u57FA\u672C\u5143\u7D20</h3><p>\u4E00\u662F\u7A0B\u5E8F\u4EE3\u7801\uFF08\u53EF\u80FD\u88AB\u6267\u884C\u76F8\u540C\u7A0B\u5E8F\u7684\u5176\u4ED6\u8FDB\u7A0B\u5171\u4EAB\uFF09\uFF0C\u4E8C\u662F\u548C\u4EE3\u7801\u76F8\u5173\u8054\u7684\u6570\u636E\u96C6\u3002\u8FD9\u91CC\u7684\u201C\u548C\u4EE3\u7801\u76F8\u5173\u8054\u7684\u6570\u636E\u96C6\u6307\u7684\u662F\u6570\u636E\u6BB5\u548C\u8FDB\u7A0B\u63A7\u5236\u5757\u201D\u3002\u8FDB\u7A0B\u662F\u4E00\u79CD\u52A8\u6001\u63CF\u8FF0\uFF0C\u4F46\u662F\u5E76\u4E0D\u4EE3\u8868\u6240\u6709\u7684\u8FDB\u7A0B\u90FD\u5728\u8FD0\u884C\u3002(\u8FDB\u7A0B\u5728\u5185\u5B58\u4E2D\u56E0\u7B56\u7565\u6216\u8C03\u5EA6\u9700\u6C42\uFF0C\u4F1A\u5904\u4E8E\u5404\u79CD\u72B6\u6001)\u3002</p><h3>1.3\u8FD9\u91CC\u518D\u660E\u786E\u4EE5\u4E0B\u51E0\u70B9\uFF1A</h3><p>\uFF081\uFF09 \u64CD\u4F5C\u7CFB\u7EDF\u6267\u884C\u7A0B\u5E8F\u7684\u8FC7\u7A0B\uFF1A</p><p><img src="image/linux_task_struct1.png" alt="\u64CD\u4F5C\u7CFB\u7EDF\u6267\u884C\u7A0B\u5E8F\u7684\u8FC7\u7A0B"></p><p>\uFF082\uFF09\u8FDB\u7A0B\u662F\u52A8\u6001\u8FD0\u884C\u7684\u5B9E\u4F8B\uFF0C\u4F46\u662F\u5E76\u4E0D\u662F\u6240\u6709\u7684\u8FDB\u7A0B\u90FD\u5728\u8FD0\u884C\uFF0C\u8FD9\u524D\u540E\u4E24\u53E5\u8BDD\u5E76\u4E0D\u77DB\u76FE\uFF0C\u56E0\u4E3A\u7A0B\u5E8F\u88AB\u52A0\u8F7D\u5230\u5185\u5B58\u4E2D\u540E\uFF0C\u5B83\u7684\u6267\u884C\u7531\u8FDB\u7A0B\u7684\u72B6\u6001\u4EE5\u53CA\u8C03\u5EA6\u7B97\u6CD5\u7B49\u6765\u51B3\u5B9A\u8FDB\u7A0B\u7684\u8FD0\u884C</p><h2>2.\u8FDB\u7A0B\u7684\u63CF\u8FF0</h2><p>\u4E0A\u9762\u6211\u4EEC\u5DF2\u7ECF\u63D0\u5230\u8FC7PCB\uFF0C\u90A3\u4E48PCB\u5230\u5E95\u662F\u7528\u6765\u5E72\u4EC0\u4E48\u7684\u5462\uFF1F</p><p>\u5B66\u4E86\u64CD\u4F5C\u7CFB\u7EDF\u540E\uFF0C\u6211\u4EEC\u90FD\u77E5\u9053\u64CD\u4F5C\u7CFB\u7EDF\u8981\u60F3\u7BA1\u7406\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5B83\u4E0D\u662F\u76F4\u63A5\u8FDB\u884C\u7BA1\u7406\u7684\uFF0C\u800C\u662F\u901A\u8FC7\u5F97\u5230\u88AB\u7BA1\u7406\u8005\u7684\u4E00\u4E9B\u6709\u6548\u4FE1\u606F\u52A0\u4EE5\u7BA1\u7406\u7684\uFF0C\u56E0\u6B64\u5728\u8FD9\u91CC\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u7406\u89E3\uFF0C\u64CD\u4F5C\u7CFB\u7EDF\u7BA1\u7406\u8FDB\u7A0B\uFF0C\u5B9E\u5219\u662F\u5C06\u8FDB\u7A0B\u7684\u6709\u6548\u4FE1\u606F\u63D0\u53D6\u51FA\u6765\u7136\u540E\u901A\u8FC7\u7BA1\u7406\u8FD9\u4E9B\u4FE1\u606F\u6765\u7BA1\u7406\u8FDB\u7A0B\uFF0C\u800C\u6240\u6709\u7684\u8FDB\u7A0B\u4FE1\u606F\u88AB\u5B58\u653E\u5728\u4E00\u4E2A\u53EB\u505A <strong>\u8FDB\u7A0B\u63A7\u5236\u5757</strong> \u7684\u6570\u636E\u7ED3\u6784\u4E2D(\u53EF\u4EE5\u7406\u89E3\u4E3A\u8FDB\u7A0B\u5C5E\u6027\u7684\u96C6\u5408)\uFF0C\u8FD9\u4E5F\u5C31\u662F\u5373\u5C06\u8981\u4ECB\u7ECD\u7684\u8FDB\u7A0B\u63A7\u5236\u5757(<strong>PCB</strong>).</p><p>\u6BCF\u4E2A\u8FDB\u7A0B\u5728\u5185\u6838\u4E2D\u90FD\u6709\u4E00\u4E2A\u8FDB\u7A0B\u63A7\u5236\u5757(<strong>PCB</strong>)\u6765\u7EF4\u62A4\u8FDB\u7A0B\u76F8\u5173\u7684\u4FE1\u606F,Linux\u5185\u6838\u7684\u8FDB\u7A0B\u63A7\u5236\u5757\u662Ftask_struct\u7ED3\u6784\u4F53.</p><p><strong>task_struct</strong> \u662FLinux\u5185\u6838\u7684\u4E00\u79CD\u6570\u636E\u7ED3\u6784\uFF0C\u5B83\u4F1A\u88AB\u88C5\u8F7D\u5230RAM\u4E2D\u5E76\u4E14\u5305\u542B\u7740\u8FDB\u7A0B\u7684\u4FE1\u606F\u3002\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u628A\u5B83\u7684\u4FE1\u606F\u653E\u5728 <strong>task_struct</strong> \u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u4F53 \u5305\u542B\u4E86\u8FD9\u4E9B\u5185\u5BB9\uFF1A</p><blockquote><p>\u6807\u793A\u7B26\uFF1A \u63CF\u8FF0\u672C\u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6\u7B26\uFF0C\u7528\u6765\u533A\u522B\u5176\u4ED6\u8FDB\u7A0B\u3002 \u72B6\u6001 \uFF1A\u4EFB\u52A1\u72B6\u6001\uFF0C\u9000\u51FA\u4EE3\u7801\uFF0C\u9000\u51FA\u4FE1\u53F7\u7B49\u3002 \u4F18\u5148\u7EA7 \uFF1A\u76F8\u5BF9\u4E8E\u5176\u4ED6\u8FDB\u7A0B\u7684\u4F18\u5148\u7EA7\u3002 \u7A0B\u5E8F\u8BA1\u6570\u5668\uFF1A\u7A0B\u5E8F\u4E2D\u5373\u5C06\u88AB\u6267\u884C\u7684\u4E0B\u4E00\u6761\u6307\u4EE4\u7684\u5730\u5740\u3002 \u5185\u5B58\u6307\u9488\uFF1A\u5305\u62EC\u7A0B\u5E8F\u4EE3\u7801\u548C\u8FDB\u7A0B\u76F8\u5173\u6570\u636E\u7684\u6307\u9488\uFF0C\u8FD8\u6709\u548C\u5176\u4ED6\u8FDB\u7A0B\u5171\u4EAB\u7684\u5185\u5B58\u5757\u7684\u6307\u9488\u3002 \u4E0A\u4E0B\u6587\u6570\u636E\uFF1A\u8FDB\u7A0B\u6267\u884C\u65F6\u5904\u7406\u5668\u7684\u5BC4\u5B58\u5668\u4E2D\u7684\u6570\u636E\u3002 I/O\u72B6\u6001\u4FE1\u606F\uFF1A\u5305\u62EC\u663E\u793A\u7684I/O\u8BF7\u6C42,\u5206\u914D\u7ED9\u8FDB\u7A0B\u7684I/O\u8BBE\u5907\u548C\u88AB\u8FDB\u7A0B\u4F7F\u7528\u7684\u6587\u4EF6\u5217\u8868\u3002 \u8BB0\u8D26\u4FE1\u606F\uFF1A\u53EF\u80FD\u5305\u62EC\u5904\u7406\u5668\u65F6\u95F4\u603B\u548C\uFF0C\u4F7F\u7528\u7684\u65F6\u949F\u6570\u603B\u548C\uFF0C\u65F6\u95F4\u9650\u5236\uFF0C\u8BB0\u8D26\u53F7\u7B49\u3002</p></blockquote><p>\u6709\u5173\u8FDB\u7A0B\u4FE1\u606F\u8FD8\u6709\u4EE5\u4E0B\u4E09\u70B9\u9700\u8981\u4E86\u89E3\uFF1A</p><ol><li>\u4FDD\u5B58\u8FDB\u7A0B\u4FE1\u606F\u7684\u6570\u636E\u7ED3\u6784\u53EB\u505A task_struct\uFF0C\u53EF\u4EE5\u5728 <strong>include/linux/sched.h</strong> \u4E2D\u627E\u5230\u5B83\uFF1B</li><li>\u6240\u6709\u8FD0\u884C\u5728\u7CFB\u7EDF\u4E2D\u7684\u8FDB\u7A0B\u90FD\u4EE5 task_struct \u94FE\u8868\u7684\u5F62\u5F0F\u5B58\u5728\u5185\u6838\u4E2D\uFF1B</li><li>\u8FDB\u7A0B\u7684\u4FE1\u606F\u53EF\u4EE5\u901A\u8FC7 <strong>/proc</strong> \u7CFB\u7EDF\u6587\u4EF6\u5939\u67E5\u770B\u3002\u8981\u83B7\u53D6 <strong>PID</strong> \u4E3A400\u7684\u8FDB\u7A0B\u4FE1\u606F\uFF0C\u4F60\u9700\u8981\u67E5\u770B <strong>/proc/400</strong> \u8FD9\u4E2A\u6587\u4EF6\u5939\u3002\u5927\u591A\u6570\u8FDB\u7A0B\u4FE1\u606F\u540C\u6837\u53EF\u4EE5\u4F7F\u7528 <strong>top</strong> \u548C <strong>ps</strong> \u8FD9\u4E9B\u7528\u6237\u7EA7\u5DE5\u5177\u6765\u83B7\u53D6,\u4F8B\u5982\uFF1A</li></ol><p><img src="image/linux_task_struct2.png" alt="pidlist"></p><h2>3.\u5256\u6790task_struct\u7ED3\u6784\u4F53</h2><h3>3.1 \u8FDB\u7A0B\u7684\u72B6\u6001</h3><pre><code>volatile long state;
</code></pre><p>state\u7684\u53EF\u80FD\u53D6\u503C\u4E3A\uFF1A</p><pre><code class="language-c">#define TASK_RUNNING        0//\u8FDB\u7A0B\u8981\u4E48\u6B63\u5728\u6267\u884C\uFF0C\u8981\u4E48\u51C6\u5907\u6267\u884C
#define TASK_INTERRUPTIBLE  1 //\u53EF\u4E2D\u65AD\u7684\u7761\u7720\uFF0C\u53EF\u4EE5\u901A\u8FC7\u4E00\u4E2A\u4FE1\u53F7\u5524\u9192
#define TASK_UNINTERRUPTIBLE    2 //\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\uFF0C\u4E0D\u53EF\u4EE5\u901A\u8FC7\u4FE1\u53F7\u8FDB\u884C\u5524\u9192
#define __TASK_STOPPED      4 //\u8FDB\u7A0B\u505C\u6B62\u6267\u884C
#define __TASK_TRACED       8 //\u8FDB\u7A0B\u88AB\u8FFD\u8E2A
/* in tsk-&gt;exit_state */ 
#define EXIT_ZOMBIE     16 //\u50F5\u5C38\u72B6\u6001\u7684\u8FDB\u7A0B\uFF0C\u8868\u793A\u8FDB\u7A0B\u88AB\u7EC8\u6B62\uFF0C\u4F46\u662F\u7236\u8FDB\u7A0B\u8FD8\u6CA1\u6709\u83B7\u53D6\u5B83\u7684\u7EC8\u6B62\u4FE1\u606F\uFF0C\u6BD4\u5982\u8FDB\u7A0B\u6709\u6CA1\u6709\u6267\u884C\u5B8C\u7B49\u4FE1\u606F\u3002                     
#define EXIT_DEAD       32 //\u8FDB\u7A0B\u7684\u6700\u7EC8\u72B6\u6001\uFF0C\u8FDB\u7A0B\u6B7B\u4EA1
/* in tsk-&gt;state again */ 
#define TASK_DEAD       64 //\u6B7B\u4EA1
#define TASK_WAKEKILL       128 //\u5524\u9192\u5E76\u6740\u6B7B\u7684\u8FDB\u7A0B
#define TASK_WAKING     256 //\u5524\u9192\u8FDB\u7A0B
</code></pre><p>\u8FDB\u7A0B\u72B6\u6001\u7684\u5207\u6362\u8FC7\u7A0B\u548C\u539F\u56E0\u5927\u81F4\u5982\u4E0B\u56FE\uFF08\u56FE\u7247\u6765\u81EA\u300ALinux Kernel Development\u300B\uFF09\uFF1A</p><p><img src="image/linux_task_struct3.png" alt="process_state"></p><h5>\u4E94\u4E2A\u4E92\u65A5\u72B6\u6001</h5><p>state\u57DF\u80FD\u591F\u53D65\u4E2A\u4E92\u4E3A\u6392\u65A5\u7684\u503C\uFF08\u901A\u4FD7\u4E00\u70B9\u5C31\u662F\u8FD9\u4E94\u4E2A\u503C\u4EFB\u610F\u4E24\u4E2A\u4E0D\u80FD\u4E00\u8D77\u4F7F\u7528\uFF0C\u53EA\u80FD\u5355\u72EC\u4F7F\u7528\uFF09\u3002\u7CFB\u7EDF\u4E2D\u7684\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u5FC5\u7136\u5904\u4E8E\u4EE5\u4E0A\u6240\u5217\u8FDB\u7A0B\u72B6\u6001\u4E2D\u7684\u4E00\u79CD\u3002</p><table><thead><tr><th>\u72B6\u6001</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>TASK_RUNNING</td><td>\u8868\u793A\u8FDB\u7A0B\u8981\u4E48\u6B63\u5728\u6267\u884C\uFF0C\u8981\u4E48\u6B63\u8981\u51C6\u5907\u6267\u884C\uFF08\u5DF2\u7ECF\u5C31\u7EEA\uFF09\uFF0C\u6B63\u5728\u7B49\u5F85cpu\u65F6\u95F4\u7247\u7684\u8C03\u5EA6</td></tr><tr><td>TASK_INTERRUPTIBLE</td><td>\u8FDB\u7A0B\u56E0\u4E3A\u7B49\u5F85\u4E00\u4E9B\u6761\u4EF6\u800C\u88AB\u6302\u8D77\uFF08\u963B\u585E\uFF09\u800C\u6240\u5904\u7684\u72B6\u6001\u3002\u8FD9\u4E9B\u6761\u4EF6\u4E3B\u8981\u5305\u62EC\uFF1A\u786C\u4E2D\u65AD\u3001\u8D44\u6E90\u3001\u4E00\u4E9B\u4FE1\u53F7\u2026\u2026\uFF0C\u4E00\u65E6\u7B49\u5F85\u7684\u6761\u4EF6\u6210\u7ACB\uFF0C\u8FDB\u7A0B\u5C31\u4F1A\u4ECE\u8BE5\u72B6\u6001\uFF08\u963B\u585E\uFF09\u8FC5\u901F\u8F6C\u5316\u6210\u4E3A\u5C31\u7EEA\u72B6\u6001TASK_RUNNING</td></tr><tr><td>TASK_UNINTERRUPTIBLE</td><td>\u610F\u4E49\u4E0ETASK_INTERRUPTIBLE\u7C7B\u4F3C\uFF0C\u9664\u4E86\u4E0D\u80FD\u901A\u8FC7\u63A5\u53D7\u4E00\u4E2A\u4FE1\u53F7\u6765\u5524\u9192\u4EE5\u5916\uFF0C\u5BF9\u4E8E\u5904\u4E8ETASK_UNINTERRUPIBLE\u72B6\u6001\u7684\u8FDB\u7A0B\uFF0C\u54EA\u6015\u6211\u4EEC\u4F20\u9012\u4E00\u4E2A\u4FE1\u53F7\u6216\u8005\u6709\u4E00\u4E2A\u5916\u90E8\u4E2D\u65AD\u90FD\u4E0D\u80FD\u5524\u9192\u4ED6\u4EEC\u3002\u53EA\u6709\u5B83\u6240\u7B49\u5F85\u7684\u8D44\u6E90\u53EF\u7528\u7684\u65F6\u5019\uFF0C\u4ED6\u624D\u4F1A\u88AB\u5524\u9192\u3002\u8FD9\u4E2A\u6807\u5FD7\u5F88\u5C11\u7528\uFF0C\u4F46\u662F\u5E76\u4E0D\u4EE3\u8868\u6CA1\u6709\u4EFB\u4F55\u7528\u5904\uFF0C\u5176\u5B9E\u4ED6\u7684\u4F5C\u7528\u975E\u5E38\u5927\uFF0C\u7279\u522B\u662F\u5BF9\u4E8E\u9A71\u52A8\u523A\u63A2\u76F8\u5173\u7684\u786C\u4EF6\u8FC7\u7A0B\u5F88\u91CD\u8981\uFF0C\u8FD9\u4E2A\u523A\u63A2\u8FC7\u7A0B\u4E0D\u80FD\u88AB\u4E00\u4E9B\u5176\u4ED6\u7684\u4E1C\u897F\u7ED9\u4E2D\u65AD\uFF0C\u5426\u5219\u5C31\u4F1A\u8BA9\u8FDB\u57CE\u8FDB\u5165\u4E0D\u53EF\u9884\u6D4B\u7684\u72B6\u6001</td></tr><tr><td>TASK_STOPPED</td><td>\u8FDB\u7A0B\u88AB\u505C\u6B62\u6267\u884C\uFF0C\u5F53\u8FDB\u7A0B\u63A5\u6536\u5230SIGSTOP\u3001SIGTTIN\u3001SIGTSTP\u6216\u8005SIGTTOU\u4FE1\u53F7\u4E4B\u540E\u5C31\u4F1A\u8FDB\u5165\u8BE5\u72B6\u6001</td></tr><tr><td>TASK_TRACED</td><td>\u8868\u793A\u8FDB\u7A0B\u88ABdebugger\u7B49\u8FDB\u7A0B\u76D1\u89C6\uFF0C\u8FDB\u7A0B\u6267\u884C\u88AB\u8C03\u8BD5\u7A0B\u5E8F\u6240\u505C\u6B62\uFF0C\u5F53\u4E00\u4E2A\u8FDB\u7A0B\u88AB\u53E6\u5916\u7684\u8FDB\u7A0B\u6240\u76D1\u89C6\uFF0C\u6BCF\u4E00\u4E2A\u4FE1\u53F7\u90FD\u4F1A\u8BA9\u8FDB\u57CE\u8FDB\u5165\u8BE5\u72B6\u6001</td></tr></tbody></table><h5>2\u4E2A\u7EC8\u6B62\u72B6\u6001</h5><pre><code class="language-c">/* task state */
int exit_state;
int exit_code, exit_signal;
</code></pre><table><thead><tr><th>\u72B6\u6001</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>EXIT_ZOMBIE</td><td>\u8FDB\u7A0B\u7684\u6267\u884C\u88AB\u7EC8\u6B62\uFF0C\u4F46\u662F\u5176\u7236\u8FDB\u7A0B\u8FD8\u6CA1\u6709\u4F7F\u7528wait()\u7B49\u7CFB\u7EDF\u8C03\u7528\u6765\u83B7\u77E5\u5B83\u7684\u7EC8\u6B62\u4FE1\u606F\uFF0C\u6B64\u65F6\u8FDB\u7A0B\u6210\u4E3A\u50F5\u5C38\u8FDB\u7A0B</td></tr><tr><td>EXIT_DEAD</td><td>\u8FDB\u7A0B\u7684\u6700\u7EC8\u72B6\u6001</td></tr></tbody></table><h5>\u65B0\u589E\u7761\u7720\u72B6\u6001</h5><p>Linux \u5185\u6838\u63D0\u4F9B\u4E86\u4E24\u79CD\u65B9\u6CD5\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u7761\u7720\u72B6\u6001\u3002</p><ul><li>\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u7761\u7720\u72B6\u6001\u7684\u666E\u901A\u65B9\u6CD5\u662F\u5C06\u8FDB\u7A0B\u72B6\u6001\u8BBE\u7F6E\u4E3A TASK_INTERRUPTIBLE \u6216 TASK_UNINTERRUPTIBLE \u5E76\u8C03\u7528\u8C03\u5EA6\u7A0B\u5E8F\u7684 schedule() \u51FD\u6570\u3002\u8FD9\u6837\u4F1A\u5C06\u8FDB\u7A0B\u4ECE CPU \u8FD0\u884C\u961F\u5217\u4E2D\u79FB\u9664\u3002</li><li>\u5982\u679C\u8FDB\u7A0B\u5904\u4E8E <strong>\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001</strong>\uFF08\u901A\u8FC7\u5C06\u5176\u72B6\u6001\u8BBE\u7F6ETASK_INTERRUPTIBLE\uFF09\uFF0C\u90A3\u4E48\u53EF\u4EE5\u901A\u8FC7\u663E\u5F0F\u7684\u5524\u9192\u547C\u53EB\uFF08wakeup_process()\uFF09\u6216\u9700\u8981\u5904\u7406\u7684\u4FE1\u53F7\u6765\u5524\u9192\u5B83\u3002</li><li>\u4F46\u662F\uFF0C\u5982\u679C\u8FDB\u7A0B\u5904\u4E8E <strong>\u975E\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001</strong>\uFF08\u901A\u8FC7\u5C06\u5176\u72B6\u6001\u8BBE\u7F6E\u4E3A TASK_UNINTERRUPTIBLE\uFF09\uFF0C\u90A3\u4E48\u53EA\u80FD\u901A\u8FC7\u663E\u5F0F\u7684\u5524\u9192\u547C\u53EB\u5C06\u5176\u5524\u9192\u3002\u9664\u975E\u4E07\u4E0D\u5F97\u5DF2\uFF0C\u5426\u5219\u6211\u4EEC\u5EFA\u8BAE\u60A8\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\uFF0C\u800C\u4E0D\u662F\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\uFF08\u6BD4\u5982\u8BF4\u5728\u8BBE\u5907 I/O \u671F\u95F4\uFF0C\u5904\u7406\u4FE1\u53F7\u975E\u5E38\u56F0\u96BE\u65F6\uFF09\u3002 \u5F53\u5904\u4E8E\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\u7684\u4EFB\u52A1\u63A5\u6536\u5230\u4FE1\u53F7\u65F6\uFF0C\u5B83\u9700\u8981\u5904\u7406\u8BE5\u4FE1\u53F7\uFF08\u9664\u975E\u5B83\u5DF2\u88AB\u5C4F\u5F0A\uFF09\uFF0C\u79BB\u5F00\u4E4B\u524D\u6B63\u5728\u5904\u7406\u7684\u4EFB\u52A1\uFF08\u6B64\u5904\u9700\u8981\u6E05\u9664\u4EE3\u7801\uFF09\uFF0C\u5E76\u5C06 -EINTR \u8FD4\u56DE\u7ED9\u7528\u6237\u7A7A\u95F4\u3002\u518D\u4E00\u6B21\uFF0C\u68C0\u67E5\u8FD9\u4E9B\u8FD4\u56DE\u4EE3\u7801\u548C\u91C7\u53D6\u9002\u5F53\u64CD\u4F5C\u7684\u5DE5\u4F5C\u5C06\u7531\u7A0B\u5E8F\u5458\u5B8C\u6210\u3002</li></ul><p>\u56E0\u6B64\uFF0C\u61D2\u60F0\u7684\u7A0B\u5E8F\u5458\u53EF\u80FD\u6BD4\u8F83\u559C\u6B22\u5C06\u8FDB\u7A0B\u7F6E\u4E3A\u4E0D\u53EF\u4E2D\u65AD\u6A21\u5F0F\u7684\u7761\u7720\u72B6\u6001\uFF0C\u56E0\u4E3A\u4FE1\u53F7\u4E0D\u4F1A\u5524\u9192\u8FD9\u7C7B\u4EFB\u52A1\u3002</p><p>\u4F46\u9700\u8981\u6CE8\u610F\u7684\u4E00\u79CD\u60C5\u51B5\u662F\uFF0C\u5BF9\u4E0D\u53EF\u4E2D\u65AD\u7761\u7720\u6A21\u5F0F\u7684\u8FDB\u7A0B\u7684\u5524\u9192\u547C\u53EB\u53EF\u80FD\u4F1A\u7531\u4E8E\u67D0\u4E9B\u539F\u56E0\u4E0D\u4F1A\u53D1\u751F\uFF0C\u8FD9\u4F1A\u4F7F\u8FDB\u7A0B\u65E0\u6CD5\u88AB\u7EC8\u6B62\uFF0C\u4ECE\u800C\u6700\u7EC8\u5F15\u53D1\u95EE\u9898\uFF0C\u56E0\u4E3A\u60DF\u4E00\u7684\u89E3\u51B3\u65B9\u6CD5\u5C31\u662F\u91CD\u542F\u7CFB\u7EDF\u3002\u4E00\u65B9\u9762\uFF0C\u60A8\u9700\u8981\u8003\u8651\u4E00\u4E9B\u7EC6\u8282\uFF0C\u56E0\u4E3A\u4E0D\u8FD9\u6837\u505A\u4F1A\u5728\u5185\u6838\u7AEF\u548C\u7528\u6237\u7AEF\u5F15\u5165 bug\u3002\u53E6\u4E00\u65B9\u9762\uFF0C\u60A8\u53EF\u80FD\u4F1A\u751F\u6210\u6C38\u8FDC\u4E0D\u4F1A\u505C\u6B62\u7684\u8FDB\u7A0B\uFF08\u88AB\u963B\u585E\u4E14\u65E0\u6CD5\u7EC8\u6B62\u7684\u8FDB\u7A0B\uFF09\u3002</p><p>\u73B0\u5728\uFF0C\u6211\u4EEC\u5728\u5185\u6838\u4E2D\u5B9E\u73B0\u4E86\u4E00\u79CD\u65B0\u7684\u7761\u7720\u65B9\u6CD5</p><table><thead><tr><th>\u72B6\u6001</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>TASK_KILLABLE</td><td>\u5F53\u8FDB\u7A0B\u5904\u4E8E\u8FD9\u79CD\u53EF\u4EE5\u7EC8\u6B62\u7684\u65B0\u7761\u7720\u72B6\u6001\u4E2D\uFF0C\u5B83\u7684\u8FD0\u884C\u539F\u7406\u7C7B\u4F3C\u4E8E TASK_UNINTERRUPTIBLE\uFF0C\u53EA\u4E0D\u8FC7\u53EF\u4EE5\u54CD\u5E94\u81F4\u547D\u4FE1\u53F7</td></tr></tbody></table><p>\u6362\u53E5\u8BDD\u8BF4\uFF0C<strong>ASK_UNINTERRUPTIBLE + TASK_WAKEKILL = TASK_KILLABLE</strong> \u3002\u800CTASK_WAKEKILL \u7528\u4E8E\u5728\u63A5\u6536\u5230\u81F4\u547D\u4FE1\u53F7\u65F6\u5524\u9192\u8FDB\u7A0B\uFF0C\u65B0\u7684\u7761\u7720\u72B6\u6001\u5141\u8BB8 TASK_UNINTERRUPTIBLE \u54CD\u5E94\u81F4\u547D\u4FE1\u53F7\u3002</p><h3>3.2 \u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6(pid)</h3><pre><code>pid_t pid;//\u8FDB\u7A0B\u7684\u552F\u4E00\u6807\u8BC6
pid_t tgid;// \u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\u7684pid\u6210\u5458\u7684\u503C
</code></pre><p>\u5728Linux\u7CFB\u7EDF\u4E2D\uFF0C\u4E00\u4E2A\u7EBF\u7A0B\u7EC4\u4E2D\u7684\u6240\u6709\u7EBF\u7A0B\u4F7F\u7528\u548C\u8BE5\u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\uFF08\u8BE5\u7EC4\u4E2D\u7684\u7B2C\u4E00\u4E2A\u8F7B\u91CF\u7EA7\u8FDB\u7A0B\uFF09\u76F8\u540C\u7684PID\uFF0C\u5E76\u88AB\u5B58\u653E\u5728tgid\u6210\u5458\u4E2D\u3002<strong>\u53EA\u6709\u7EBF\u7A0B\u7EC4\u7684\u9886\u5934\u7EBF\u7A0B\u7684pid\u6210\u5458\u624D\u4F1A\u88AB\u8BBE\u7F6E\u4E3A\u4E0Etgid\u76F8\u540C\u7684\u503C</strong> \u3002\u6CE8\u610F\uFF0Cgetpid()\u7CFB\u7EDF\u8C03\u7528\u8FD4\u56DE\u7684\u662F\u5F53\u524D\u8FDB\u7A0B\u7684tgid\u503C\u800C\u4E0D\u662Fpid\u503C\u3002\uFF08\u7EBF\u7A0B\u662F\u7A0B\u5E8F\u8FD0\u884C\u7684\u6700\u5C0F\u5355\u4F4D\uFF0C\u8FDB\u7A0B\u662F\u7A0B\u5E8F\u8FD0\u884C\u7684\u57FA\u672C\u5355\u4F4D\u3002\uFF09</p><h2>3.3 \u8FDB\u7A0B\u5185\u6838\u6808</h2><pre><code>void *stack;
</code></pre><p>\u8FDB\u7A0B\u901A\u8FC7 <strong>alloc_thread_info</strong> \u51FD\u6570\u5206\u914D\u5B83\u7684\u5185\u6838\u6808\uFF0C\u901A\u8FC7 <strong>free_thread_info</strong> \u51FD\u6570\u91CA\u653E\u6240\u5206\u914D\u7684\u5185\u6838\u6808\u3002</p><pre><code class="language-c">/* linux-2.6.38.8/kernel/fork.c */ 
static inline struct thread_info *alloc_thread_info(struct task_struct *tsk)
{
	#ifdef CONFIG_DEBUG_STACK_USAGE
		gfp_t mask = GFP_KERNEL | __GFP_ZERO;
	#else
		gfp_t mask = GFP_KERNEL;
	#endif
		return (struct thread_info *)__get_free_pages(mask, THREAD_SIZE_ORDER);
}
static inline void free_thread_info(struct thread_info *ti)
{
	free_pages((unsigned long)ti, THREAD_SIZE_ORDER);
}
</code></pre><p>\u5176\u4E2D\uFF0CTHREAD_SIZE_ORDER\u5B8F\u5728linux-2.6.38.8/arch/arm/include/asm/thread_info.h\u6587\u4EF6\u4E2D\u88AB\u5B9A\u4E49\u4E3A1\uFF0C\u4E5F\u5C31\u662F\u8BF4alloc_thread_info\u51FD\u6570\u901A\u8FC7\u8C03\u7528 <strong>get_free_pages</strong> \u51FD\u6570\u5206\u914D2\u4E2A\u9875\u7684\u5185\u5B58\uFF08\u5B83\u7684\u9996\u5730\u5740\u662F8192\u5B57\u8282\u5BF9\u9F50\u7684\uFF09\u3002 Linux\u5185\u6838\u901A\u8FC7 <strong>thread_union</strong> \u8054\u5408\u4F53\u6765\u8868\u793A\u8FDB\u7A0B\u7684\u5185\u6838\u6808\uFF0C\u5176\u4E2DTHREAD_SIZE\u5B8F\u7684\u5927\u5C0F\u4E3A8192\u3002</p><pre><code class="language-c">union thread_union {
   struct thread_info thread_info;
   unsigned long stack[THREAD_SIZE/sizeof(long)];
};
</code></pre><p>\u5F53\u8FDB\u7A0B\u4ECE\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u65F6\uFF0C\u8FDB\u7A0B\u7684\u5185\u6838\u6808\u603B\u662F\u7A7A\u7684\uFF0C\u6240\u4EE5ARM\u7684sp\u5BC4\u5B58\u5668\u6307\u5411\u8FD9\u4E2A\u6808\u7684\u9876\u7AEF\u3002\u56E0\u6B64\uFF0C\u5185\u6838\u80FD\u591F\u8F7B\u6613\u5730\u901A\u8FC7sp\u5BC4\u5B58\u5668\u83B7\u5F97\u5F53\u524D\u6B63\u5728CPU\u4E0A\u8FD0\u884C\u7684\u8FDB\u7A0B\u3002</p><pre><code class="language-c">/* linux-2.6.38.8/arch/arm/include/asm/current.h */
static inline struct task_struct *get_current(void)
{
	return current_thread_info()-&gt;task;
}
 
#define current (get_current())
 
/* linux-2.6.38.8/arch/arm/include/asm/thread_info.h */ 
static inline struct thread_info *current_thread_info(void)
{
	register unsigned long sp asm (&quot;sp&quot;);
	return (struct thread_info *)(sp &amp; ~(THREAD_SIZE - 1));
}
</code></pre><p>\u8FDB\u7A0B\u5185\u6838\u6808\u4E0E\u8FDB\u7A0B\u63CF\u8FF0\u7B26\u7684\u5173\u7CFB\u5982\u4E0B\u56FE\uFF1A <img src="images/linux_task_struct4.png" alt="prostack"></p><h3>3.4 \u8FDB\u7A0B\u7684\u6807\u8BB0</h3><pre><code>unsigned int flags; //flags\u6210\u5458\u7684\u53EF\u80FD\u53D6\u503C\u5982\u4E0B
</code></pre><pre><code class="language-c">#define PF_ALIGNWARN    0x00000001    /* Print alignment warning msgs */
                    /* Not implemented yet, only for 486*/
#define PF_STARTING    0x00000002    /* being created */
#define PF_EXITING    0x00000004    /* getting shut down */
#define PF_EXITPIDONE    0x00000008    /* pi exit done on shut down */
#define PF_VCPU        0x00000010    /* I&#39;m a virtual CPU */
#define PF_FORKNOEXEC    0x00000040    /* forked but didn&#39;t exec */
#define PF_MCE_PROCESS  0x00000080      /* process policy on mce errors */
#define PF_SUPERPRIV    0x00000100    /* used super-user privileges */
#define PF_DUMPCORE    0x00000200    /* dumped core */
#define PF_SIGNALED    0x00000400    /* killed by a signal */
#define PF_MEMALLOC    0x00000800    /* Allocating memory */
#define PF_FLUSHER    0x00001000    /* responsible for disk writeback */
#define PF_USED_MATH    0x00002000    /* if unset the fpu must be initialized before use */
#define PF_FREEZING    0x00004000    /* freeze in progress. do not account to load */
#define PF_NOFREEZE    0x00008000    /* this thread should not be frozen */
#define PF_FROZEN    0x00010000    /* frozen for system suspend */
#define PF_FSTRANS    0x00020000    /* inside a filesystem transaction */
#define PF_KSWAPD    0x00040000    /* I am kswapd */
#define PF_OOM_ORIGIN    0x00080000    /* Allocating much memory to others */
#define PF_LESS_THROTTLE 0x00100000    /* Throttle me less: I clean memory */
#define PF_KTHREAD    0x00200000    /* I am a kernel thread */
#define PF_RANDOMIZE    0x00400000    /* randomize virtual address space */
#define PF_SWAPWRITE    0x00800000    /* Allowed to write to swap */
#define PF_SPREAD_PAGE    0x01000000    /* Spread page cache over cpuset */
#define PF_SPREAD_SLAB    0x02000000    /* Spread some slab caches over cpuset */
#define PF_THREAD_BOUND    0x04000000    /* Thread bound to specific cpu */
#define PF_MCE_EARLY    0x08000000      /* Early kill for mce process policy */
#define PF_MEMPOLICY    0x10000000    /* Non-default NUMA mempolicy */
#define PF_MUTEX_TESTER    0x20000000    /* Thread belongs to the rt mutex tester */
#define PF_FREEZER_SKIP    0x40000000    /* Freezer should not count it as freezeable */
#define PF_FREEZER_NOSIG 0x80000000    /* Freezer won&#39;t send signals to it */
</code></pre><h3>3.5 \u8FDB\u7A0B\u4E4B\u95F4\u7684\u4EB2\u5C5E\u5173\u7CFB</h3><pre><code>struct task_struct *real_parent; /* real parent process */
struct task_struct *parent; /* recipient of SIGCHLD, wait4() reports */
struct list_head children;    /* list of my children */
struct list_head sibling;    /* linkage in my parent&#39;s children list */
struct task_struct *group_leader;    /* threadgroup leader */
</code></pre><p>\u5728Linux\u7CFB\u7EDF\u4E2D\uFF0C\u6240\u6709\u8FDB\u7A0B\u4E4B\u95F4\u90FD\u6709\u7740\u76F4\u63A5\u6216\u95F4\u63A5\u5730\u8054\u7CFB\uFF0C\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u6709\u5176\u7236\u8FDB\u7A0B\uFF0C\u4E5F\u53EF\u80FD\u6709\u96F6\u4E2A\u6216\u591A\u4E2A\u5B50\u8FDB\u7A0B\u3002\u62E5\u6709\u540C\u4E00\u7236\u8FDB\u7A0B\u7684\u6240\u6709\u8FDB\u7A0B\u5177\u6709\u5144\u5F1F\u5173\u7CFB\u3002</p><ul><li><strong>real_parent</strong> \u6307\u5411\u5176\u7236\u8FDB\u7A0B\uFF0C\u5982\u679C\u521B\u5EFA\u5B83\u7684\u7236\u8FDB\u7A0B\u4E0D\u518D\u5B58\u5728\uFF0C\u5219\u6307\u5411PID\u4E3A1\u7684init\u8FDB\u7A0B\u3002</li><li><strong>parent</strong> \u6307\u5411\u5176\u7236\u8FDB\u7A0B\uFF0C\u5F53\u5B83\u7EC8\u6B62\u65F6\uFF0C\u5FC5\u987B\u5411\u5B83\u7684\u7236\u8FDB\u7A0B\u53D1\u9001\u4FE1\u53F7\u3002\u5B83\u7684\u503C\u901A\u5E38\u4E0E** real_parent**\u76F8\u540C\u3002</li><li><strong>children</strong> \u8868\u793A\u94FE\u8868\u7684\u5934\u90E8\uFF0C\u94FE\u8868\u4E2D\u7684\u6240\u6709\u5143\u7D20\u90FD\u662F\u5B83\u7684\u5B50\u8FDB\u7A0B\uFF08\u8FDB\u7A0B\u7684\u5B50\u8FDB\u7A0B\u94FE\u8868\uFF09\u3002</li><li><strong>sibling</strong> \u7528\u4E8E\u628A\u5F53\u524D\u8FDB\u7A0B\u63D2\u5165\u5230\u5144\u5F1F\u94FE\u8868\u4E2D\uFF08\u8FDB\u7A0B\u7684\u5144\u5F1F\u94FE\u8868\uFF09\u3002</li><li><strong>group_leader</strong> \u6307\u5411\u5176\u6240\u5728\u8FDB\u7A0B\u7EC4\u7684\u9886\u5934\u8FDB\u7A0B\u3002</li></ul><h3>3.6 \u8FDB\u7A0B\u8C03\u5EA6\u4FE1\u606F</h3><pre><code> int prio, static_prio, normal_prio;
 unsigned int rt_priority;
 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
 unsigned int policy;
</code></pre><p>\u5B9E\u65F6\u4F18\u5148\u7EA7\u8303\u56F4\u662F0\u5230MAX_RT_PRIO-1\uFF08\u537399\uFF09\uFF0C\u800C\u666E\u901A\u8FDB\u7A0B\u7684\u9759\u6001\u4F18\u5148\u7EA7\u8303\u56F4\u662F\u4ECEMAX_RT_PRIO\u5230MAX_PRIO-1\uFF08\u5373100\u5230139)\u3002\u503C\u8D8A\u5927\u9759\u6001\u4F18\u5148\u7EA7\u8D8A\u4F4E\u3002</p><ul><li><strong>static_prio</strong> \u7528\u4E8E\u4FDD\u5B58\u9759\u6001\u4F18\u5148\u7EA7\uFF0C\u53EF\u4EE5\u901A\u8FC7nice\u7CFB\u7EDF\u8C03\u7528\u6765\u8FDB\u884C\u4FEE\u6539\u3002</li><li><strong>rt_priority</strong> \u7528\u4E8E\u4FDD\u5B58\u5B9E\u65F6\u4F18\u5148\u7EA7\u3002</li><li><strong>normal_prio</strong> \u7684\u503C\u53D6\u51B3\u4E8E\u9759\u6001\u4F18\u5148\u7EA7\u548C\u8C03\u5EA6\u7B56\u7565(\u8FDB\u7A0B\u7684\u8C03\u5EA6\u7B56\u7565\u6709\uFF1A\u5148\u6765\u5148\u670D\u52A1\uFF0C\u77ED\u4F5C\u4E1A\u4F18\u5148\u3001\u65F6\u95F4\u7247\u8F6E\u8F6C\u3001\u9AD8\u54CD\u5E94\u6BD4\u4F18\u5148\u7B49\u7B49\u7684\u8C03\u5EA6\u7B97\u6CD5\u3002</li><li><strong>prio</strong> \u7528\u4E8E\u4FDD\u5B58\u52A8\u6001\u4F18\u5148\u7EA7\u3002</li><li><strong>se\u548Crt</strong> \u90FD\u662F\u8C03\u7528\u5B9E\u4F53\uFF0C\u4E00\u4E2A\u7528\u4E8E\u666E\u901A\u8FDB\u7A0B\uFF0C\u4E00\u4E2A\u7528\u4E8E\u5B9E\u65F6\u8FDB\u7A0B\uFF0C\u6BCF\u4E2A\u8FDB\u7A0B\u90FD\u6709\u5176\u4E2D\u4E4B\u4E00\u7684\u5B9E\u4F53\u3002</li><li><strong>cpus_allowed</strong> \u7528\u4E8E\u63A7\u5236\u8FDB\u7A0B\u53EF\u4EE5\u5728\u54EA\u91CC\u5904\u7406\u5668\u4E0A\u8FD0\u884C\u3002</li><li><strong>policy</strong> \u8868\u793A\u8FDB\u7A0B\u7684\u8C03\u5EA6\u7B56\u7565\uFF0C\u76EE\u524D\u4E3B\u8981\u6709\u4EE5\u4E0B\u4E94\u79CD\uFF1A</li></ul><pre><code class="language-c">#define SCHED_NORMAL        0//\u6309\u7167\u4F18\u5148\u7EA7\u8FDB\u884C\u8C03\u5EA6\uFF08\u6709\u4E9B\u5730\u65B9\u4E5F\u8BF4\u662FCFS\u8C03\u5EA6\u5668\uFF09
#define SCHED_FIFO        1//\u5148\u8FDB\u5148\u51FA\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_RR        2//\u65F6\u95F4\u7247\u8F6E\u8F6C\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_BATCH        3//\u7528\u4E8E\u975E\u4EA4\u4E92\u7684\u5904\u7406\u673A\u6D88\u8017\u578B\u7684\u8FDB\u7A0B
#define SCHED_IDLE        5//\u7CFB\u7EDF\u8D1F\u8F7D\u5F88\u4F4E\u65F6\u7684\u8C03\u5EA6\u7B97\u6CD5
#define SCHED_RESET_ON_FORK     0x40000000
</code></pre><ul><li><strong>SCHED_NORMAL</strong> \u7528\u4E8E\u666E\u901A\u8FDB\u7A0B\uFF0C\u901A\u8FC7CFS\u8C03\u5EA6\u5668\u5B9E\u73B0;</li><li><strong>SCHED_BATCH</strong> \u7528\u4E8E\u975E\u4EA4\u4E92\u7684\u5904\u7406\u5668\u6D88\u8017\u578B\u8FDB\u7A0B;</li><li><strong>SCHED_IDLE</strong> \u662F\u5728\u7CFB\u7EDF\u8D1F\u8F7D\u5F88\u4F4E\u65F6\u4F7F\u7528;</li><li><strong>SCHED_FIFO</strong>\uFF08\u5148\u5165\u5148\u51FA\u8C03\u5EA6\u7B97\u6CD5\uFF09\u548C <strong>SCHED_RR</strong>\uFF08\u8F6E\u6D41\u8C03\u5EA6\u7B97\u6CD5\uFF09\u90FD\u662F\u5B9E\u65F6\u8C03\u5EA6\u7B56\u7565.</li></ul><h3>3.7 ptrace\u7CFB\u7EDF\u8C03\u7528</h3><pre><code>unsigned int ptrace;  
struct list_head ptraced;  
struct list_head ptrace_entry;  
unsigned long ptrace_message;  
siginfo_t *last_siginfo;      /* For ptrace use.  */  
ifdef CONFIG_HAVE_HW_BREAKPOINT  
atomic_t ptrace_bp_refcnt;  
</code></pre><p>\u6210\u5458ptrace\u88AB\u8BBE\u7F6E\u4E3A0\u65F6\u8868\u793A\u4E0D\u9700\u8981\u88AB\u8DDF\u8E2A\uFF0C\u5B83\u7684\u53EF\u80FD\u53D6\u503C\u5982\u4E0B\uFF1A</p><pre><code class="language-c">/* linux-2.6.38.8/include/linux/ptrace.h */  
#define PT_PTRACED  0x00000001  
#define PT_DTRACE   0x00000002  /* delayed trace (used on m68k, i386) */  
#define PT_TRACESYSGOOD 0x00000004  
#define PT_PTRACE_CAP   0x00000008  /* ptracer can follow suid-exec */  
#define PT_TRACE_FORK   0x00000010  
#define PT_TRACE_VFORK  0x00000020  
#define PT_TRACE_CLONE  0x00000040  
#define PT_TRACE_EXEC   0x00000080  
#define PT_TRACE_VFORK_DONE 0x00000100  
#define PT_TRACE_EXIT   0x00000200  
</code></pre><h3>3.8 Performance Event</h3><pre><code>#ifdef CONFIG_PERF_EVENTS
	struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
	struct mutex perf_event_mutex;
	struct list_head perf_event_list;
#endif
</code></pre><p>Performance Event\u662F\u4E00\u6B3E\u968F Linux \u5185\u6838\u4EE3\u7801\u4E00\u540C\u53D1\u5E03\u548C\u7EF4\u62A4\u7684\u6027\u80FD\u8BCA\u65AD\u5DE5\u5177\u3002\u8FD9\u4E9B\u6210\u5458\u7528\u4E8E\u5E2E\u52A9PerformanceEvent\u5206\u6790\u8FDB\u7A0B\u7684\u6027\u80FD\u95EE\u9898\u3002</p><pre><code>\u5173\u4E8EPerformance Event\u5DE5\u5177\u7684\u4ECB\u7ECD\u53EF\u53C2\u8003\u6587\u7AE0http://www.ibm.com/developerworks/cn/linux/l-cn-perf1/index.html?ca=drs-#major1\u548Chttp://www.ibm.com/developerworks/cn/linux/l-cn-perf2/index.html?ca=drs-#major1\u3002
</code></pre><h3>3.9 \u65F6\u95F4\u6570\u636E\u6210\u5458</h3><p>\u4E00\u4E2A\u8FDB\u7A0B\u4ECE\u521B\u5EFA\u5230\u7EC8\u6B62\u53EB\u505A\u8BE5\u8FDB\u7A0B\u7684\u751F\u5B58\u671F\uFF0C\u8FDB\u7A0B\u5728 <strong>\u5176\u751F\u5B58\u671F\u5185\u4F7F\u7528CPU\u65F6\u95F4</strong>\uFF0C\u5185\u6838\u90FD\u9700\u8981\u8FDB\u884C\u8BB0\u5F55\uFF0C\u8FDB\u7A0B\u8017\u8D39\u7684\u65F6\u95F4\u5206\u4E3A\u4E24\u90E8\u5206\uFF0C\u4E00\u90E8\u5206\u662F\u7528\u6237\u6A21\u5F0F\u4E0B\u8017\u8D39\u7684\u65F6\u95F4\uFF0C\u4E00\u90E8\u5206\u662F\u5728\u7CFB\u7EDF\u6A21\u5F0F\u4E0B\u8017\u8D39\u7684\u65F6\u95F4</p><pre><code>cputime_t utime, stime, utimescaled, stimescaled;
cputime_t gtime;
cputime_t prev_utime, prev_stime;//\u8BB0\u5F55\u5F53\u524D\u7684\u8FD0\u884C\u65F6\u95F4\uFF08\u7528\u6237\u6001\u548C\u5185\u6838\u6001\uFF09
unsigned long nvcsw, nivcsw; //\u81EA\u613F/\u975E\u81EA\u613F\u4E0A\u4E0B\u6587\u5207\u6362\u8BA1\u6570
struct timespec start_time;  //\u8FDB\u7A0B\u7684\u5F00\u59CB\u6267\u884C\u65F6\u95F4    
struct timespec real_start_time;  //\u8FDB\u7A0B\u771F\u6B63\u7684\u5F00\u59CB\u6267\u884C\u65F6\u95F4
unsigned long min_flt, maj_flt;
struct task_cputime cputime_expires;//cpu\u6267\u884C\u7684\u6709\u6548\u65F6\u95F4
struct list_head cpu_timers[3];//\u7528\u6765\u7EDF\u8BA1\u8FDB\u7A0B\u6216\u8FDB\u7A0B\u7EC4\u88AB\u5904\u7406\u5668\u8FFD\u8E2A\u7684\u65F6\u95F4
struct list_head run_list;
unsigned long timeout;//\u5F53\u524D\u5DF2\u4F7F\u7528\u7684\u65F6\u95F4\uFF08\u4E0E\u5F00\u59CB\u65F6\u95F4\u7684\u5DEE\u503C\uFF09
unsigned int time_slice;//\u8FDB\u7A0B\u7684\u65F6\u95F4\u7247\u7684\u5927\u5C0F
int nr_cpus_allowed;
</code></pre><h3>3.8 \u4FE1\u53F7\u5904\u7406\u4FE1\u606F</h3><pre><code>struct signal_struct *signal;//\u6307\u5411\u8FDB\u7A0B\u4FE1\u53F7\u63CF\u8FF0\u7B26
struct sighand_struct *sighand;//\u6307\u5411\u8FDB\u7A0B\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u63CF\u8FF0\u7B26
sigset_t blocked, real_blocked;//\u963B\u585E\u4FE1\u53F7\u7684\u63A9\u7801
sigset_t saved_sigmask;    /* restored if set_restore_sigmask() was used */
struct sigpending pending;//\u8FDB\u7A0B\u4E0A\u8FD8\u9700\u8981\u5904\u7406\u7684\u4FE1\u53F7
unsigned long sas_ss_sp;//\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u5907\u7528\u5806\u6808\u7684\u5730\u5740
size_t sas_ss_size;//\u4FE1\u53F7\u5904\u7406\u7A0B\u5E8F\u7684\u5806\u6808\u7684\u5730\u5740
</code></pre><h3>3.9 \u6587\u4EF6\u7CFB\u7EDF\u4FE1\u606F</h3><pre><code>/* filesystem information */
struct fs_struct *fs;//\u6587\u4EF6\u7CFB\u7EDF\u7684\u4FE1\u606F\u7684\u6307\u9488
/* open file information */
struct files_struct *files;//\u6253\u5F00\u6587\u4EF6\u7684\u4FE1\u606F\u6307\u9488
</code></pre>`,80);function e(n,i){return r}const s={render:e};s.__hmrId="/Users/deng/Documents/GitHub/dengmengqiu.github.io/posts/post/os/linux_task_struct.md";const c=n=>({components:n,render:e});export{s as VueComponent,c as VueComponentWith,_ as attributes,a as html};
